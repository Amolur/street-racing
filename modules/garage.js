// modules/garage.js
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–∞—Ä–∞–∂–∞

import { gameData, allCars, fuelSystem } from './game-data.js';
import { updatePlayerInfo } from './utils.js';
import { upgradeConfig, getUpgradeCost, calculateTotalStats, getStatName, initializeCarUpgrades } from './upgrades.js';
import { dom } from './dom-manager.js';

// –ö–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
let lastCarIndex = -1;
let lastCarData = null;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏
export function previousCar() {
    if (gameData.currentCar > 0) {
        gameData.currentCar--;
        updateGarageDisplay();
    }
}

export function nextCar() {
    if (gameData.currentCar < gameData.cars.length - 1) {
        gameData.currentCar++;
        updateGarageDisplay();
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞—Ä–∞–∂–∞
export function updateGarageDisplay() {
    if (!gameData || !gameData.cars || gameData.cars.length === 0) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –º–∞—à–∏–Ω–∞
    if (lastCarIndex === gameData.currentCar && 
        lastCarData === JSON.stringify(gameData.cars[gameData.currentCar])) {
        return;
    }
    
    const currentCar = gameData.cars[gameData.currentCar];
    initializeCarUpgrades(currentCar);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    lastCarIndex = gameData.currentCar;
    lastCarData = JSON.stringify(currentCar);
    
    // –ë–∞—Ç—á–∏–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    dom.batchUpdate(() => {
        updateCarShowcase(currentCar);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const activeTab = dom.get('.tab-minimal.active');
        if (activeTab) {
            const tabIcon = activeTab.querySelector('.tab-icon');
            if (tabIcon) {
                const iconText = tabIcon.textContent;
                switch(iconText) {
                    case 'üîß':
                        updateUpgradesMinimal();
                        break;
                    case 'üìä':
                        updateStatsDisplay();
                        break;
                    case '‚ö°':
                        updatePartsMinimal();
                        break;
                }
            }
        } else {
            updateUpgradesMinimal();
        }
    });
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω—ã –º–∞—à–∏–Ω—ã
function updateCarShowcase(car) {
    // –†–∞—Å—á–µ—Ç—ã –¥–µ–ª–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    const totalStats = calculateTotalStats(car);
    const totalPower = Math.floor((totalStats.power + totalStats.speed + 
                                   totalStats.handling + totalStats.acceleration) / 4);
    const currentFuel = fuelSystem.getCurrentFuel(car);
    
    let rating = 'D';
    if (totalPower >= 90) rating = 'S';
    else if (totalPower >= 80) rating = 'A';
    else if (totalPower >= 70) rating = 'B';
    else if (totalPower >= 60) rating = 'C';
    
    const ratingColor = {
        'S': 'var(--neon-pink)',
        'A': 'var(--neon-yellow)',
        'B': 'var(--neon-green)',
        'C': 'var(--neon-cyan)',
        'D': 'var(--text-secondary)'
    }[rating];
    
    // –ë–∞—Ç—á–∏–º –≤—Å–µ DOM –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    dom.batchUpdate(() => {
        dom.setText('#current-car-emoji', 'üèéÔ∏è');
        dom.setText('#current-car-name', car.name);
        dom.setText('#car-total-power', totalPower);
        dom.setText('#car-fuel-display', `${currentFuel}/${car.maxFuel || 30}`);
        dom.setText('#car-rating', rating);
        dom.setStyle('#car-rating', 'color', ratingColor);
        dom.setText('#car-counter', `${gameData.currentCar + 1}/${gameData.cars.length}`);
    });
    
    updateNavigationButtons();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateNavigationButtons() {
    const navButtons = document.querySelectorAll('.nav-arrow');
    if (navButtons.length < 2) return;
    
    const prevBtn = navButtons[0];
    const nextBtn = navButtons[1];
    
    if (prevBtn) {
        prevBtn.disabled = gameData.currentCar === 0;
    }
    
    if (nextBtn) {
        nextBtn.disabled = gameData.currentCar === gameData.cars.length - 1;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DocumentFragment
function updateUpgradesMinimal() {
    const container = dom.get('#upgrades-list');
    if (!container) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    const fragment = document.createDocumentFragment();
    
    let maxUpgradeLevel = 10;
    if (currentCar.price === 0 || currentCar.price <= 8000) {
        maxUpgradeLevel = 5;
    } else if (currentCar.price <= 35000) {
        maxUpgradeLevel = 7;
    }
    
    Object.keys(upgradeConfig).forEach((upgradeType, index) => {
        const config = upgradeConfig[upgradeType];
        const currentLevel = currentCar.upgrades[upgradeType] || 0;
        const cost = getUpgradeCost(upgradeType, currentLevel);
        const canUpgrade = currentLevel < maxUpgradeLevel && gameData.money >= cost;
        const isMaxed = currentLevel >= maxUpgradeLevel;
        
        const upgradeEl = dom.createElement('div', {
            className: `upgrade-item-minimal ${isMaxed ? 'maxed' : ''}`,
            styles: { animationDelay: `${index * 0.1}s` },
            html: `
                <div class="upgrade-icon-wrapper">
                    ${config.icon}
                </div>
                <div class="upgrade-content">
                    <div class="upgrade-title">${config.name}</div>
                    <div class="upgrade-level">–£—Ä–æ–≤–µ–Ω—å ${currentLevel}/${maxUpgradeLevel}</div>
                    <div class="upgrade-progress">
                        <div class="upgrade-progress-fill" style="width: ${(currentLevel / maxUpgradeLevel) * 100}%"></div>
                    </div>
                </div>
                <button class="upgrade-button" 
                        data-upgrade-type="${upgradeType}"
                        ${!canUpgrade ? 'disabled' : ''}>
                    ${isMaxed ? 'MAX' : `$${cost}`}
                </button>
            `
        });
        
        fragment.appendChild(upgradeEl);
    });
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    dom.empty('#upgrades-list');
    container.appendChild(fragment);
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsDisplay() {
    const currentCar = gameData.cars[gameData.currentCar];
    const totalStats = calculateTotalStats(currentCar);
    
    dom.batchUpdate(() => {
        ['power', 'speed', 'handling', 'acceleration'].forEach(stat => {
            dom.setText(`#stat-${stat}`, totalStats[stat]);
            dom.setStyle(`#fill-${stat}`, 'width', `${Math.min(totalStats[stat], 100)}%`);
        });
    });
}

// –ö–µ—à –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
let lastPartsState = null;

function updatePartsMinimal() {
    const container = dom.get('#special-parts-list');
    if (!container) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    const currentState = JSON.stringify(currentCar.specialParts);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–µ—Ç–∞–ª–∏
    if (lastPartsState === currentState) return;
    lastPartsState = currentState;
    
    const fragment = document.createDocumentFragment();
    
    const parts = [
        { type: 'nitro', name: '–ù–∏—Ç—Ä–æ', icon: 'üöÄ', effect: '+20% —Å–∫–æ—Ä–æ—Å—Ç—å (30% —à–∞–Ω—Å)', price: 15000 },
        { type: 'bodyKit', name: '–û–±–≤–µ—Å', icon: 'üé®', effect: '+10 –∫–æ –≤—Å–µ–º —Ö–∞—Ä-–∫–∞–º', price: 25000 },
        { type: 'ecuTune', name: '–ß–∏–ø-—Ç—é–Ω–∏–Ω–≥', icon: 'üíª', effect: '+15% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', price: 20000 }
    ];
    
    parts.forEach((part, index) => {
        const isOwned = currentCar.specialParts[part.type];
        const canBuy = !isOwned && gameData.money >= part.price;
        
        const partEl = dom.createElement('div', {
            className: `part-item-minimal ${isOwned ? 'owned' : ''}`,
            styles: { animationDelay: `${index * 0.1}s` },
            html: `
                <div class="part-icon">${part.icon}</div>
                <div class="part-info">
                    <div class="part-name">${part.name}</div>
                    <div class="part-effect">${part.effect}</div>
                    ${!isOwned ? `<div class="part-price">$${part.price.toLocaleString()}</div>` : ''}
                </div>
                ${isOwned ? 
                    '<span style="color: var(--neon-green); font-weight: 700;">‚úì</span>' :
                    `<button class="upgrade-button" 
                            data-part-type="${part.type}"
                            data-part-price="${part.price}"
                            ${!canBuy ? 'disabled' : ''}>
                        –ö—É–ø–∏—Ç—å
                    </button>`
                }
            `
        });
        
        fragment.appendChild(partEl);
    });
    
    dom.empty('#special-parts-list');
    container.appendChild(fragment);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
export const showGarageTab = dom.debounce((tab) => {
    dom.batchUpdate(() => {
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        dom.getAll('.tab-minimal').forEach(btn => btn.classList.remove('active'));
        dom.getAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        switch(tab) {
            case 'upgrades':
                dom.addClass('.tab-minimal:nth-child(1)', 'active');
                dom.addClass('#tab-upgrades', 'active');
                setTimeout(() => updateUpgradesMinimal(), 10);
                break;
            case 'stats':
                dom.addClass('.tab-minimal:nth-child(2)', 'active');
                dom.addClass('#tab-stats', 'active');
                setTimeout(() => updateStatsDisplay(), 10);
                break;
            case 'parts':
                dom.addClass('.tab-minimal:nth-child(3)', 'active');
                dom.addClass('#tab-parts', 'active');
                setTimeout(() => updatePartsMinimal(), 10);
                break;
        }
    });
}, 50);

// ============================================
// –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
// ============================================

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –º–∞—à–∏–Ω
export function updateCarsPreview() {
    const carsList = document.getElementById('cars-list');
    const carCounter = document.getElementById('car-counter');
    
    if (!carsList || !gameData.cars) return;
    
    carsList.innerHTML = '';
    
    gameData.cars.forEach((car, index) => {
        initializeCarUpgrades(car);
        const totalUpgrades = car.upgrades ? 
            Object.values(car.upgrades).reduce((sum, level) => sum + level, 0) : 0;
        
        const carCard = document.createElement('div');
        carCard.className = `car-card ${index === gameData.currentCar ? 'active' : ''}`;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
        const carInfo = allCars.find(c => c.id === car.id);
        
        carCard.innerHTML = `
            ${carInfo && carInfo.image ? 
                `<img src="${carInfo.image}" alt="${car.name}" class="car-image">` :
                `<div class="car-emoji-big">üèéÔ∏è</div>`
            }
            <div class="car-name">${car.name}</div>
            ${totalUpgrades > 0 ? `<div class="car-upgrade-badge">+${totalUpgrades}</div>` : ''}
        `;
        
        carsList.appendChild(carCard);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏
    const currentIndex = gameData.currentCar;
    carsList.style.transform = `translateX(-${currentIndex * 100}%)`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    if (carCounter) {
        carCounter.textContent = `${gameData.currentCar + 1} / ${gameData.cars.length}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –º–∞—à–∏–Ω—ã
export function updateCurrentCarStats() {
    if (!gameData.cars || !gameData.cars[gameData.currentCar]) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    initializeCarUpgrades(currentCar);
    
    const totalStats = calculateTotalStats(currentCar);
    const totalUpgrades = currentCar.upgrades ? 
        Object.values(currentCar.upgrades).reduce((sum, level) => sum + level, 0) : 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const powerEl = document.getElementById('garage-power');
    const speedEl = document.getElementById('garage-speed');
    const handlingEl = document.getElementById('garage-handling');
    const accelerationEl = document.getElementById('garage-acceleration');
    
    if (powerEl) powerEl.textContent = totalStats.power;
    if (speedEl) speedEl.textContent = totalStats.speed;
    if (handlingEl) handlingEl.textContent = totalStats.handling;
    if (accelerationEl) accelerationEl.textContent = totalStats.acceleration;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–ª—É—á—à–µ–Ω–∏–π
    const totalUpgradesEl = document.getElementById('total-upgrades');
    if (totalUpgradesEl) {
        totalUpgradesEl.textContent = totalUpgrades;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –º–∞—à–∏–Ω—ã
    const avgStat = Math.floor((totalStats.power + totalStats.speed + totalStats.handling + totalStats.acceleration) / 4);
    const carRatingEl = document.getElementById('car-rating');
    if (carRatingEl) {
        let rating = 'D';
        if (avgStat >= 90) rating = 'S';
        else if (avgStat >= 80) rating = 'A';
        else if (avgStat >= 70) rating = 'B';
        else if (avgStat >= 60) rating = 'C';
        
        carRatingEl.textContent = rating;
        carRatingEl.style.color = 
            rating === 'S' ? 'var(--neon-pink)' :
            rating === 'A' ? 'var(--neon-yellow)' :
            rating === 'B' ? 'var(--neon-green)' :
            rating === 'C' ? 'var(--neon-cyan)' : 'var(--text-secondary)';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
export function updateUpgradesDisplay() {
    const upgradesGrid = document.getElementById('upgrades-grid');
    
    if (!upgradesGrid || !gameData.cars || !gameData.cars[gameData.currentCar]) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    initializeCarUpgrades(currentCar);
    
    upgradesGrid.innerHTML = '';
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –º–∞—à–∏–Ω—ã
    let maxUpgradeLevel = 10;
    if (currentCar.price === 0 || currentCar.price <= 8000) {
        maxUpgradeLevel = 5;
    } else if (currentCar.price <= 35000) {
        maxUpgradeLevel = 7;
    }
    
    Object.keys(upgradeConfig).forEach(upgradeType => {
        const config = upgradeConfig[upgradeType];
        const currentLevel = currentCar.upgrades[upgradeType] || 0;
        const cost = getUpgradeCost(upgradeType, currentLevel);
        const canUpgrade = currentLevel < maxUpgradeLevel && gameData.money >= cost;
        
        const upgradeCard = document.createElement('div');
        upgradeCard.className = 'upgrade-card-compact';
        
        upgradeCard.innerHTML = `
            <div class="upgrade-icon-big">${config.icon}</div>
            <div class="upgrade-info">
                <div class="upgrade-name">${config.name}</div>
                <div class="upgrade-level-bar">
                    <div class="upgrade-progress-mini">
                        <div class="upgrade-progress-fill-mini" style="width: ${(currentLevel / maxUpgradeLevel) * 100}%"></div>
                    </div>
                    <span class="upgrade-level-text">${currentLevel}/${maxUpgradeLevel}</span>
                </div>
                <div class="upgrade-effects">
                    ${Object.entries(config.affects).map(([stat, value]) => {
                        const statName = getStatName(stat);
                        return `+${value} ${statName}`;
                    }).join(', ')}
                </div>
            </div>
            <div class="upgrade-action">
                <button class="btn-upgrade-mini" 
                        onclick="upgradeComponent('${upgradeType}')" 
                        ${!canUpgrade ? 'disabled' : ''}>
                    ${currentLevel >= maxUpgradeLevel ? '–ú–ê–ö–°' :
                      gameData.money < cost ? `$${cost.toLocaleString()}` : 
                      `$${cost.toLocaleString()}`}
                </button>
            </div>
        `;
        
        upgradesGrid.appendChild(upgradeCard);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
export function updateSpecialPartsDisplay() {
    const currentCar = gameData.cars[gameData.currentCar];
    const partsGrid = document.getElementById('special-parts-grid');
    
    if (!partsGrid || !currentCar) return;
    
    const specialParts = [
        { type: 'nitro', name: '–ù–∏—Ç—Ä–æ', icon: 'üöÄ', desc: '+20% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ (—à–∞–Ω—Å 30%)', price: 15000 },
        { type: 'bodyKit', name: '–°–ø–æ—Ä—Ç. –æ–±–≤–µ—Å', icon: 'üé®', desc: '+10 –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º', price: 25000 },
        { type: 'ecuTune', name: '–ß–∏–ø-—Ç—é–Ω–∏–Ω–≥', icon: 'üíª', desc: '+15% –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', price: 20000 }
    ];
    
    partsGrid.innerHTML = '';
    
    specialParts.forEach(part => {
        const isOwned = currentCar.specialParts[part.type];
        const canBuy = !isOwned && gameData.money >= part.price;
        
        const partCard = document.createElement('div');
        partCard.className = `special-part-card ${isOwned ? 'owned' : ''}`;
        
        partCard.innerHTML = `
            <div class="special-icon-big">${part.icon}</div>
            <div class="special-part-info">
                <div class="special-part-name">${part.name}</div>
                <div class="special-part-desc">${part.desc}</div>
                ${isOwned ? 
                    '<div class="special-part-owned">‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</div>' :
                    `<div class="special-part-price">$${part.price.toLocaleString()}</div>`
                }
            </div>
            <div class="special-part-action">
                ${isOwned ? 
                    '<span class="special-part-owned">–ö–£–ü–õ–ï–ù–û</span>' :
                    `<button class="btn-upgrade-mini" 
                            onclick="buySpecialPart('${part.type}', ${part.price})" 
                            ${!canBuy ? 'disabled' : ''}>
                        ${canBuy ? '–ö–£–ü–ò–¢–¨' : '–ù–ï–¢ $'}
                    </button>`
                }
            </div>
        `;
        
        partsGrid.appendChild(partCard);
    });
}

// –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
dom.delegate('#upgrades-list', 'click', '.upgrade-button', function(e) {
    const upgradeType = this.dataset.upgradeType;
    if (upgradeType) {
        window.upgradeComponent(upgradeType);
    }
});

// –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π
dom.delegate('#special-parts-list', 'click', '.upgrade-button', function(e) {
    const partType = this.dataset.partType;
    const partPrice = parseInt(this.dataset.partPrice);
    if (partType && partPrice) {
        window.buySpecialPart(partType, partPrice);
    }
});
function initGarageEventDelegation() {
    // –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π
    const upgradesList = document.getElementById('upgrades-list');
    if (upgradesList) {
        upgradesList.addEventListener('click', function(e) {
            const button = e.target.closest('.upgrade-button');
            if (button && button.dataset.upgradeType) {
                window.upgradeComponent(button.dataset.upgradeType);
            }
        });
    }
    
    // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    const partsList = document.getElementById('special-parts-list');
    if (partsList) {
        partsList.addEventListener('click', function(e) {
            const button = e.target.closest('.upgrade-button');
            if (button && button.dataset.partType) {
                const partType = button.dataset.partType;
                const partPrice = parseInt(button.dataset.partPrice);
                if (partType && partPrice) {
                    window.buySpecialPart(partType, partPrice);
                }
            }
        });
    }
}

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–∞—Ä–∞–∂
const originalUpdateGarageDisplay = updateGarageDisplay;
export function updateGarageDisplay() {
    originalUpdateGarageDisplay();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
    setTimeout(() => {
        initGarageEventDelegation();
    }, 100);
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º showGarageTab –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
export function showGarageTab(tab) {
    // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.tab-minimal').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    let tabButton, tabContent;
    
    switch(tab) {
        case 'upgrades':
            tabButton = document.querySelector('.tab-minimal:nth-child(1)');
            tabContent = document.getElementById('tab-upgrades');
            break;
        case 'stats':
            tabButton = document.querySelector('.tab-minimal:nth-child(2)');
            tabContent = document.getElementById('tab-stats');
            break;
        case 'parts':
            tabButton = document.querySelector('.tab-minimal:nth-child(3)');
            tabContent = document.getElementById('tab-parts');
            break;
    }
    
    if (tabButton) tabButton.classList.add('active');
    if (tabContent) tabContent.classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
    setTimeout(() => {
        switch(tab) {
            case 'upgrades':
                updateUpgradesMinimal();
                break;
            case 'stats':
                updateStatsDisplay();
                break;
            case 'parts':
                updatePartsMinimal();
                break;
        }
        // –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        initGarageEventDelegation();
    }, 10);
}
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.updateGarageDisplay = updateGarageDisplay;
window.updateUpgradesMinimal = updateUpgradesMinimal;
window.updateStatsDisplay = updateStatsDisplay;
window.updatePartsMinimal = updatePartsMinimal;