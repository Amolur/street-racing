// modules/upgrades.js
// –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π —Å –ó–ê–©–ò–©–ï–ù–ù–´–ú–ò –ø–æ–∫—É–ø–∫–∞–º–∏

import { gameData } from './game-data.js';
import { updatePlayerInfo } from './utils.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏–π
export const upgradeConfig = {
    engine: {
        name: "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        icon: "üîß",
        affects: { power: 5, speed: 3 },
        baseCost: 500,
        costMultiplier: 2.5,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å"
    },
    turbo: {
        name: "–¢—É—Ä–±–æ",
        icon: "üí®",
        affects: { acceleration: 4, power: 2 },
        baseCost: 300,
        costMultiplier: 2.3,
        description: "–£–ª—É—á—à–∞–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ –º–æ—â–Ω–æ—Å—Ç—å"
    },
    tires: {
        name: "–®–∏–Ω—ã",
        icon: "üèÅ",
        affects: { handling: 3, acceleration: 2 },
        baseCost: 200,
        costMultiplier: 2.2,
        description: "–ü–æ–≤—ã—à–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
    },
    suspension: {
        name: "–ü–æ–¥–≤–µ—Å–∫–∞",
        icon: "üî©",
        affects: { handling: 5 },
        baseCost: 400,
        costMultiplier: 2.4,
        description: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    },
    transmission: {
        name: "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á",
        icon: "‚öôÔ∏è",
        affects: { speed: 3, acceleration: 3 },
        baseCost: 600,
        costMultiplier: 2.5,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã
export function initializeCarUpgrades(car) {
    if (!car.upgrades) {
        car.upgrades = {
            engine: 0,
            turbo: 0,
            tires: 0,
            suspension: 0,
            transmission: 0
        };
    }
    
    if (!car.specialParts) {
        car.specialParts = {
            nitro: false,
            bodyKit: false,
            ecuTune: false,
            fuelTank: false
        };
    }
    
    if (car.fuel === undefined) {
        car.fuel = 30;
    }
    if (car.maxFuel === undefined) {
        car.maxFuel = car.specialParts.fuelTank ? 40 : 30;
    }
    if (!car.lastFuelUpdate) {
        car.lastFuelUpdate = new Date().toISOString();
    }
    
    return car;
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è (–¢–û–õ–¨–ö–û –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø)
export function getUpgradeCost(type, currentLevel) {
    const config = upgradeConfig[type];
    return Math.floor(config.baseCost * Math.pow(config.costMultiplier, currentLevel));
}

// –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–∞—à–∏–Ω—ã —Å —É—á–µ—Ç–æ–º —É–ª—É—á—à–µ–Ω–∏–π
export function calculateTotalStats(car) {
    let totalStats = {
        power: car.power,
        speed: car.speed,
        handling: car.handling,
        acceleration: car.acceleration
    };
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    if (car.upgrades) {
        Object.keys(car.upgrades).forEach(upgradeType => {
            const level = car.upgrades[upgradeType];
            const config = upgradeConfig[upgradeType];
            
            if (config && config.affects) {
                Object.keys(config.affects).forEach(stat => {
                    totalStats[stat] += config.affects[stat] * level;
                });
            }
        });
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    if (car.specialParts) {
        if (car.specialParts.bodyKit) {
            Object.keys(totalStats).forEach(stat => {
                totalStats[stat] += 10;
            });
        }
        
        if (car.specialParts.ecuTune) {
            Object.keys(totalStats).forEach(stat => {
                totalStats[stat] = Math.floor(totalStats[stat] * 1.15);
            });
        }
    }
    
    return totalStats;
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –í–°–Å –ß–ï–†–ï–ó –°–ï–†–í–ï–†
export async function upgradeComponent(type) {
    const currentCar = gameData.cars[gameData.currentCar];
    const currentLevel = currentCar.upgrades[type];
    const cost = getUpgradeCost(type, currentLevel);
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    if (currentLevel >= 10) {
        window.notify('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è!', 'warning');
        return;
    }
    
    if (gameData.money < cost) {
        window.notify('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!', 'error');
        return;
    }
    
    try {
        console.log('üí∞ –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä...');
        
        // –ó–ê–©–ò–¢–ê: –í–°–Ø –õ–û–ì–ò–ö–ê –£–õ–£–ß–®–ï–ù–ò–Ø –ù–ê –°–ï–†–í–ï–†–ï
        const response = await fetch(`${window.API_URL}/game/upgrade`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({ 
                carIndex: gameData.currentCar, 
                upgradeType: type 
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            window.notify(error.error || '–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è', 'error');
            return;
        }
        
        const result = await response.json();
        
        console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        
        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        gameData.money = result.remainingMoney;
        currentCar.upgrades[type] = result.newLevel;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (result.gameData && result.gameData.stats) {
            gameData.stats = result.gameData.stats;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePlayerInfo();
        window.updateGarageDisplay();
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        let upgradeMessage = `${upgradeConfig[type].name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${result.newLevel}!`;
        if (result.eventDiscount) {
            upgradeMessage += ` (–°–∫–∏–¥–∫–∞: $${result.originalCost - result.cost})`;
        }
        window.notify(upgradeMessage, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
        if (window.updateTaskProgress) {
            window.updateTaskProgress('upgradesBought');
        }
        
        checkUpgradeAchievements();
        if (window.checkAllAchievements) {
            window.checkAllAchievements();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è:', error);
        window.notify('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–æ–∫—É–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π - –í–°–Å –ß–ï–†–ï–ó –°–ï–†–í–ï–†
export async function buySpecialPart(type, cost) {
    const currentCar = gameData.cars[gameData.currentCar];
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    if (gameData.money < cost) {
        window.notify('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!', 'error');
        return;
    }
    
    if (currentCar.specialParts[type]) {
        window.notify('–≠—Ç–∞ –¥–µ—Ç–∞–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', 'warning');
        return;
    }
    
    try {
        console.log('üîß –ü–æ–∫—É–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä...');
        
        // –ó–ê–©–ò–¢–ê: –í–°–Ø –õ–û–ì–ò–ö–ê –ü–û–ö–£–ü–ö–ò –ù–ê –°–ï–†–í–ï–†–ï
        const response = await fetch(`${window.API_URL}/game/buy-special-part`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({ 
                carIndex: gameData.currentCar, 
                partType: type,
                cost: cost
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            window.notify(error.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏', 'error');
            return;
        }
        
        const result = await response.json();
        
        console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª—å —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        
        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        gameData.money = result.remainingMoney;
        currentCar.specialParts[type] = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (result.gameData && result.gameData.stats) {
            gameData.stats = result.gameData.stats;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePlayerInfo();
        window.updateGarageDisplay();
        
        const partNames = {
            nitro: "–ù–∏—Ç—Ä–æ",
            bodyKit: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±–≤–µ—Å",
            ecuTune: "–ß–∏–ø-—Ç—é–Ω–∏–Ω–≥",
            fuelTank: "–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∞–∫"
        };
        
        window.notify(`${partNames[type]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç–æ–∂–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ —É–ª—É—á—à–µ–Ω–∏—è)
        if (window.updateTaskProgress) {
            window.updateTaskProgress('upgradesBought');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –¥–µ—Ç–∞–ª–∏:', error);
        window.notify('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
export function getStatName(stat) {
    const statNames = {
        power: "–ú–æ—â–Ω–æ—Å—Ç—å",
        speed: "–°–∫–æ—Ä–æ—Å—Ç—å",
        handling: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        acceleration: "–†–∞–∑–≥–æ–Ω"
    };
    return statNames[stat] || stat;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è
export function checkUpgradeAchievements() {
    const currentCar = gameData.cars[gameData.currentCar];
    const totalUpgradeLevel = Object.values(currentCar.upgrades).reduce((sum, level) => sum + level, 0);
    
    if (totalUpgradeLevel === 10) {
        window.notify("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü–µ—Ä–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è!", 'reward');
    } else if (totalUpgradeLevel === 25) {
        window.notify("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –°–µ—Ä—å–µ–∑–Ω—ã–π —Ç—é–Ω–∏–Ω–≥!", 'reward');
    } else if (totalUpgradeLevel === 50) {
        window.notify("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞!", 'reward');
    }
}

window.upgradeComponent = upgradeComponent;
window.buySpecialPart = buySpecialPart;