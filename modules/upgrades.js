// modules/upgrades.js
// –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏

import { gameData } from './game-data.js';
import { showError, updatePlayerInfo } from './utils.js';
// –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª –∏–º–ø–æ—Ä—Ç queueSave, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.queueSave

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏–π
export const upgradeConfig = {
    engine: {
        name: "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        icon: "üîß",
        affects: { power: 5, speed: 3 },
        baseCost: 500,
        costMultiplier: 2.5,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å"
    },
    turbo: {
        name: "–¢—É—Ä–±–æ",
        icon: "üí®",
        affects: { acceleration: 4, power: 2 },
        baseCost: 300,
        costMultiplier: 2.3,
        description: "–£–ª—É—á—à–∞–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ –º–æ—â–Ω–æ—Å—Ç—å"
    },
    tires: {
        name: "–®–∏–Ω—ã",
        icon: "üèÅ",
        affects: { handling: 3, acceleration: 2 },
        baseCost: 200,
        costMultiplier: 2.2,
        description: "–ü–æ–≤—ã—à–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
    },
    suspension: {
        name: "–ü–æ–¥–≤–µ—Å–∫–∞",
        icon: "üî©",
        affects: { handling: 5 },
        baseCost: 400,
        costMultiplier: 2.4,
        description: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    },
    transmission: {
        name: "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á",
        icon: "‚öôÔ∏è",
        affects: { speed: 3, acceleration: 3 },
        baseCost: 600,
        costMultiplier: 2.5,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã
export function initializeCarUpgrades(car) {
    if (!car.upgrades) {
        car.upgrades = {
            engine: 0,
            turbo: 0,
            tires: 0,
            suspension: 0,
            transmission: 0
        };
    }
    
    if (!car.specialParts) {
        car.specialParts = {
            nitro: false,
            bodyKit: false,
            ecuTune: false,
            fuelTank: false
        };
    }
    
    if (car.fuel === undefined) {
        car.fuel = 30;
    }
    if (car.maxFuel === undefined) {
        car.maxFuel = car.specialParts.fuelTank ? 40 : 30;
    }
    if (!car.lastFuelUpdate) {
        car.lastFuelUpdate = new Date().toISOString();
    }
    
    return car;
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
export function getUpgradeCost(type, currentLevel) {
    const config = upgradeConfig[type];
    return Math.floor(config.baseCost * Math.pow(config.costMultiplier, currentLevel));
}

// –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–∞—à–∏–Ω—ã —Å —É—á–µ—Ç–æ–º —É–ª—É—á—à–µ–Ω–∏–π
export function calculateTotalStats(car) {
    let totalStats = {
        power: car.power,
        speed: car.speed,
        handling: car.handling,
        acceleration: car.acceleration
    };
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    if (car.upgrades) {
        Object.keys(car.upgrades).forEach(upgradeType => {
            const level = car.upgrades[upgradeType];
            const config = upgradeConfig[upgradeType];
            
            if (config && config.affects) {
                Object.keys(config.affects).forEach(stat => {
                    totalStats[stat] += config.affects[stat] * level;
                });
            }
        });
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    if (car.specialParts) {
        if (car.specialParts.bodyKit) {
            Object.keys(totalStats).forEach(stat => {
                totalStats[stat] += 10;
            });
        }
        
        if (car.specialParts.ecuTune) {
            Object.keys(totalStats).forEach(stat => {
                totalStats[stat] = Math.floor(totalStats[stat] * 1.15);
            });
        }
    }
    
    return totalStats;
}

// –§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export async function upgradeComponent(type) {
    const currentCar = gameData.cars[gameData.currentCar];
    const currentLevel = currentCar.upgrades[type];
    const cost = getUpgradeCost(type, currentLevel);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (currentLevel >= 10) {
        showError('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è!');
        return;
    }
    
    if (gameData.money < cost) {
        showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞
    const oldMoney = gameData.money;
    const oldSpent = gameData.stats.moneySpent;
    const oldLevel = currentCar.upgrades[type];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è UI)
    gameData.money -= cost;
    gameData.stats.moneySpent += cost;
    currentCar.upgrades[type]++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É
    updatePlayerInfo();
    if (window.updateGarageDisplay) {
        window.updateGarageDisplay();
    }
    
    console.log('üí∞ –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è...');
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (window.saveGameData) {
            await window.saveGameData(gameData);
        } else {
            throw new Error('saveGameData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        showError(`${upgradeConfig[type].name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${currentCar.upgrades[type]}!`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
        if (window.updateTaskProgress) {
            window.updateTaskProgress('upgradesBought');
        }
        
        checkUpgradeAchievements();
        if (window.checkAllAchievements) {
            window.checkAllAchievements();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è:', error);
        
        // –û–¢–ö–ê–¢–´–í–ê–ï–ú –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        gameData.money = oldMoney;
        gameData.stats.moneySpent = oldSpent;
        currentCar.upgrades[type] = oldLevel;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePlayerInfo();
        if (window.updateGarageDisplay) {
            window.updateGarageDisplay();
        }
        
        showError('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    }
}

// –ü–æ–∫—É–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
export async function buySpecialPart(type, cost) {
    const currentCar = gameData.cars[gameData.currentCar];
    
    if (gameData.money < cost) {
        showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!');
        return;
    }
    
    if (currentCar.specialParts[type]) {
        showError('–≠—Ç–∞ –¥–µ—Ç–∞–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞
    const oldMoney = gameData.money;
    const oldSpent = gameData.stats.moneySpent;
    const oldPart = currentCar.specialParts[type];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è UI)
    gameData.money -= cost;
    gameData.stats.moneySpent += cost;
    currentCar.specialParts[type] = true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É
    updatePlayerInfo();
    if (window.updateGarageDisplay) {
        window.updateGarageDisplay();
    }
    
    console.log('üîß –ü–æ–∫—É–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏...');
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (window.saveGameData) {
            await window.saveGameData(gameData);
        } else {
            throw new Error('saveGameData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const partNames = {
            nitro: "–ù–∏—Ç—Ä–æ",
            bodyKit: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±–≤–µ—Å",
            ecuTune: "–ß–∏–ø-—Ç—é–Ω–∏–Ω–≥"
        };
        
        console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        showError(`${partNames[type]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
        
         // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç–æ–∂–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ —É–ª—É—á—à–µ–Ω–∏—è)
        if (window.updateTaskProgress) {
            window.updateTaskProgress('upgradesBought');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏:', error);
        
        // –û–¢–ö–ê–¢–´–í–ê–ï–ú –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        gameData.money = oldMoney;
        gameData.stats.moneySpent = oldSpent;
        currentCar.specialParts[type] = oldPart;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePlayerInfo();
        if (window.updateGarageDisplay) {
            window.updateGarageDisplay();
        }
        
        showError('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
export function getStatName(stat) {
    const statNames = {
        power: "–ú–æ—â–Ω–æ—Å—Ç—å",
        speed: "–°–∫–æ—Ä–æ—Å—Ç—å",
        handling: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        acceleration: "–†–∞–∑–≥–æ–Ω"
    };
    return statNames[stat] || stat;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è
export function checkUpgradeAchievements() {
    const currentCar = gameData.cars[gameData.currentCar];
    const totalUpgradeLevel = Object.values(currentCar.upgrades).reduce((sum, level) => sum + level, 0);
    
    if (totalUpgradeLevel === 10) {
        showError("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü–µ—Ä–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è!");
    } else if (totalUpgradeLevel === 25) {
        showError("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –°–µ—Ä—å–µ–∑–Ω—ã–π —Ç—é–Ω–∏–Ω–≥!");
    } else if (totalUpgradeLevel === 50) {
        showError("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞!");
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.upgradeComponent = upgradeComponent;
window.buySpecialPart = buySpecialPart;