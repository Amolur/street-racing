// modules/shop.js
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞ —Å –Ω–æ–≤—ã–º UI

import { gameData, allCars, levelSystem } from './game-data.js';
import { updatePlayerInfo } from './utils.js';
import { initializeCarUpgrades } from './upgrades.js';

// –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é createShopCarCard –≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞
function createShopCarCard(car, owned, canBuy, requiredLevel, playerLevel) {
    const locked = playerLevel < requiredLevel;
    
    return `
        <div class="card ${owned ? 'owned' : ''} ${locked ? 'locked' : ''}">
            <div class="card-header">
                <h3 class="card-title">${car.name}</h3>
                ${owned ? '<span class="badge">–ö—É–ø–ª–µ–Ω–æ</span>' : ''}
            </div>
            <div class="card-body">
                <div class="car-image-placeholder">üöó</div>
                <div class="car-stats-grid">
                    <div class="stat">
                        <span>–ú–æ—â–Ω–æ—Å—Ç—å</span>
                        <span>${car.power}</span>
                    </div>
                    <div class="stat">
                        <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
                        <span>${car.speed}</span>
                    </div>
                    <div class="stat">
                        <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                        <span>${car.handling}</span>
                    </div>
                    <div class="stat">
                        <span>–†–∞–∑–≥–æ–Ω</span>
                        <span>${car.acceleration}</span>
                    </div>
                </div>
                ${locked ? `<p class="level-requirement">–¢—Ä–µ–±—É–µ—Ç—Å—è ${requiredLevel} —É—Ä–æ–≤–µ–Ω—å</p>` : ''}
                <p class="car-price">$${car.price.toLocaleString()}</p>
                ${!owned ? `
                    <button class="action-button" onclick="buyCar(${car.id})" ${!canBuy ? 'disabled' : ''}>
                        ${locked ? `–ù—É–∂–µ–Ω ${requiredLevel} —É—Ä–æ–≤–µ–Ω—å` : 
                          !canBuy ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                ` : ''}
            </div>
        </div>
    `;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
export function updateShopDisplay() {
    const buyTab = document.getElementById('shop-buy');
    const sellTab = document.getElementById('shop-sell');
    
    if (buyTab && buyTab.classList.contains('active')) {
        updateBuyTab();
    }
    
    if (sellTab && sellTab.classList.contains('active')) {
        updateSellTab();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∫—É–ø–∫–∏
function updateBuyTab() {
    const container = document.getElementById('cars-for-sale');
    if (!container) return;
    
    const carsHTML = allCars
        .filter(car => car.price > 0)
        .map(car => {
            const owned = gameData.cars.some(c => c.id === car.id);
            const requiredLevel = levelSystem.getCarRequiredLevel(car.price);
            const canBuy = gameData.level >= requiredLevel && gameData.money >= car.price;
            
            if (owned) return '';
            
            return createShopCarCard(car, owned, canBuy, requiredLevel, gameData.level);
        })
        .filter(html => html !== '')
        .join('');
    
    container.innerHTML = carsHTML || '<p class="no-data">–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã —É–∂–µ –∫—É–ø–ª–µ–Ω—ã!</p>';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
function updateSellTab() {
    const container = document.getElementById('cars-to-sell');
    if (!container) return;
    
    const carsHTML = gameData.cars
        .filter(car => car.price > 0)
        .map((car, index) => {
            const sellPrice = Math.floor(car.price * 0.7);
            
            return `
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">${car.name}</h3>
                    </div>
                    <div class="card-body">
                        <div class="car-image-placeholder">üöó</div>
                        <p class="car-price">–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: $${sellPrice.toLocaleString()}</p>
                        <button class="action-button warning" onclick="sellCar(${index})">
                            –ü—Ä–æ–¥–∞—Ç—å
                        </button>
                    </div>
                </div>
            `;
        })
        .join('');
    
    container.innerHTML = carsHTML || '<p class="no-data">–£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏</p>';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω—ã
export async function buyCar(carId) {
    const car = allCars.find(c => c.id === carId);
    const requiredLevel = levelSystem.getCarRequiredLevel(car.price);
    
    if (!car || gameData.money < car.price || gameData.level < requiredLevel) {
        window.notifyError('üöó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —ç—Ç—É –º–∞—à–∏–Ω—É!');
        return;
    }
    
    if (!confirm(`–ö—É–ø–∏—Ç—å ${car.name} –∑–∞ $${car.price.toLocaleString()}?`)) {
        return;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    gameData.money -= car.price;
    gameData.stats.moneySpent += car.price;
    
    const newCar = {...car, owned: true};
    initializeCarUpgrades(newCar);
    gameData.cars.push(newCar);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï
    if (window.queueSave) {
        await window.queueSave(gameData, 'critical');
    }
    
    updatePlayerInfo();
    updateShopDisplay();
    
    window.notify(`üöó –í—ã –∫—É–ø–∏–ª–∏ ${car.name}!`, 'car');
    
    if (window.updateTaskProgress) {
        window.updateTaskProgress('moneySpent', car.price);
    }
    
    if (window.checkAllAchievements) {
        window.checkAllAchievements();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –º–∞—à–∏–Ω—ã
export async function sellCar(index) {
    if (gameData.cars.length <= 1) {
        window.notifyError('üöó –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∞—à–∏–Ω—É!');
        return;
    }
    
    const car = gameData.cars[index];
    const sellPrice = Math.floor(car.price * 0.7);
    
    if (confirm(`–ü—Ä–æ–¥–∞—Ç—å ${car.name} –∑–∞ $${sellPrice.toLocaleString()}?`)) {
        gameData.money += sellPrice;
        gameData.stats.moneyEarned += sellPrice;
        gameData.cars.splice(index, 1);
        
        if (gameData.currentCar >= gameData.cars.length) {
            gameData.currentCar = 0;
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï
        if (window.queueSave) {
            await window.queueSave(gameData, 'critical');
        }
        
        updatePlayerInfo();
        updateShopDisplay();
        
        window.notify(`üöó ${car.name} –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ $${sellPrice.toLocaleString()}`, 'car');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
export function showShopTab(tab) {
    // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.tabs-header .tab-button').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('#shop-screen .tab-content').forEach(content => content.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    if (tab === 'buy') {
        const buyButton = document.querySelector('.tabs-header .tab-button:first-child');
        const buyContent = document.getElementById('shop-buy');
        
        if (buyButton) buyButton.classList.add('active');
        if (buyContent) buyContent.classList.add('active');
        updateBuyTab();
    } else {
        const sellButton = document.querySelector('.tabs-header .tab-button:last-child');
        const sellContent = document.getElementById('shop-sell');
        
        if (sellButton) sellButton.classList.add('active');
        if (sellContent) sellContent.classList.add('active');
        updateSellTab();
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.updateShopDisplay = updateShopDisplay;
window.buyCar = buyCar;
window.sellCar = sellCar;
window.showShopTab = showShopTab;