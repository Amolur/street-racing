// modules/ui-components.js
// –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—à–∏–Ω—ã –¥–ª—è –≥–∞—Ä–∞–∂–∞
export function createCarPreviewCard(car) {
    return `
        <div class="car-preview-card">
            <h3>${car.name}</h3>
            <div class="car-image-placeholder">üöó</div>
            <div class="car-stats">
                <div class="stat-row">
                    <span>–ú–æ—â–Ω–æ—Å—Ç—å</span>
                    <span>${car.power}</span>
                </div>
                <div class="stat-row">
                    <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
                    <span>${car.speed}</span>
                </div>
                <div class="stat-row">
                    <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                    <span>${car.handling}</span>
                </div>
                <div class="stat-row">
                    <span>–†–∞–∑–≥–æ–Ω</span>
                    <span>${car.acceleration}</span>
                </div>
            </div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
export function createOpponentListItem(opponent, index, canAfford) {
    const betAmount = Math.floor(opponent.reward / 2);
    const fuelCost = opponent.fuelCost || 5;
    
    return `
        <div class="list-item ${!canAfford ? 'disabled' : ''}" onclick="${canAfford ? `showRacePreview(${index})` : ''}">
            <div class="list-item-content">
                <div class="list-item-title">${opponent.name}</div>
                <div class="list-item-subtitle">
                    ${opponent.car} ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${opponent.difficulty}
                </div>
                <div class="race-stakes">
                    <span class="stake">–°—Ç–∞–≤–∫–∞: $${betAmount}</span>
                    <span class="stake">–í—ã–∏–≥—Ä—ã—à: $${opponent.reward}</span>
                    <span class="stake">–¢–æ–ø–ª–∏–≤–æ: ${fuelCost}</span>
                </div>
            </div>
            <div class="list-item-action">‚Üí</div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—à–∏–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
export function createShopCarCard(car, owned, canBuy, requiredLevel, playerLevel) {
    const locked = playerLevel < requiredLevel;
    
    return `
        <div class="card ${owned ? 'owned' : ''} ${locked ? 'locked' : ''}">
            <div class="card-header">
                <h3 class="card-title">${car.name}</h3>
                ${owned ? '<span class="badge">–ö—É–ø–ª–µ–Ω–æ</span>' : ''}
            </div>
            <div class="card-body">
                <div class="car-image-placeholder">üöó</div>
                <div class="car-stats-grid">
                    <div class="stat">
                        <span>–ú–æ—â–Ω–æ—Å—Ç—å</span>
                        <span>${car.power}</span>
                    </div>
                    <div class="stat">
                        <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
                        <span>${car.speed}</span>
                    </div>
                    <div class="stat">
                        <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                        <span>${car.handling}</span>
                    </div>
                    <div class="stat">
                        <span>–†–∞–∑–≥–æ–Ω</span>
                        <span>${car.acceleration}</span>
                    </div>
                </div>
                ${locked ? `<p class="level-requirement">–¢—Ä–µ–±—É–µ—Ç—Å—è ${requiredLevel} —É—Ä–æ–≤–µ–Ω—å</p>` : ''}
                <p class="car-price">$${car.price.toLocaleString()}</p>
                ${!owned ? `
                    <button class="action-button" onclick="buyCar(${car.id})" ${!canBuy ? 'disabled' : ''}>
                        ${locked ? `–ù—É–∂–µ–Ω ${requiredLevel} —É—Ä–æ–≤–µ–Ω—å` : 
                          !canBuy ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                ` : ''}
            </div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
export function createUpgradeItem(upgradeType, config, currentLevel, maxLevel, cost, canUpgrade) {
    const isMaxed = currentLevel >= maxLevel;
    
    return `
        <div class="list-item upgrade-item ${isMaxed ? 'maxed' : ''}">
            <div class="list-item-content">
                <div class="list-item-title">${config.name}</div>
                <div class="list-item-subtitle">
                    –£—Ä–æ–≤–µ–Ω—å ${currentLevel}/${maxLevel}
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(currentLevel / maxLevel) * 100}%"></div>
                </div>
            </div>
            <button class="action-button small" 
                    onclick="upgradeComponent('${upgradeType}')"
                    ${!canUpgrade ? 'disabled' : ''}>
                ${isMaxed ? 'MAX' : `$${cost}`}
            </button>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
export function createTaskCard(task) {
    const progressPercent = Math.min((task.progress / task.required) * 100, 100);
    const statusClass = task.claimed ? 'claimed' : task.completed ? 'completed' : 'active';
    
    return `
        <div class="card task-card ${statusClass}">
            <div class="card-header">
                <h3 class="card-title">${task.name}</h3>
                <span class="task-reward">$${task.reward}</span>
            </div>
            <div class="card-body">
                <p class="task-description">${task.description}</p>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${progressPercent}%"></div>
                </div>
                <p class="progress-text">${task.progress} / ${task.required}</p>
                ${task.completed && !task.claimed ? 
                    `<button class="action-button success" onclick="claimTaskReward('${task.id}')">
                        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                    </button>` : 
                    task.claimed ? '<p class="task-status">‚úì –ü–æ–ª—É—á–µ–Ω–æ</p>' : ''
                }
            </div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function createRacePreviewModal(opponent, currentCar, betAmount, fuelCost, currentFuel) {
    return `
        <div class="modal-overlay" onclick="if(event.target === this) closeRacePreview()">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">–í—ã–∑–æ–≤ –Ω–∞ –≥–æ–Ω–∫—É</h2>
                    <button class="modal-close" onclick="closeRacePreview()">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="race-preview-info">
                        <h3>–í–∞—à–∞ –º–∞—à–∏–Ω–∞</h3>
                        <p>${currentCar.name}</p>
                        <p>–¢–æ–ø–ª–∏–≤–æ: ${currentFuel}/${currentCar.maxFuel || 30}</p>
                        
                        <h3>–°–æ–ø–µ—Ä–Ω–∏–∫</h3>
                        <p>${opponent.name}</p>
                        <p>–ú–∞—à–∏–Ω–∞: ${opponent.car}</p>
                        
                        <div class="race-conditions">
                            <p>–°—Ç–∞–≤–∫–∞: <strong>$${betAmount}</strong></p>
                            <p>–í—ã–∏–≥—Ä—ã—à: <strong>$${opponent.reward}</strong></p>
                            <p>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: <strong>${fuelCost}</strong></p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="action-button secondary" onclick="closeRacePreview()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="action-button success" 
                            onclick="confirmRace(${opponent.index})"
                            ${currentFuel < fuelCost ? 'disabled' : ''}>
                        ${currentFuel < fuelCost ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞' : '–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É'}
                    </button>
                </div>
            </div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–Ω–∫–∏
export function createRaceResult(won, opponent, playerTime, opponentTime, rewards) {
    return `
        <div class="race-result-container">
            <div class="card">
                <div class="card-body text-center">
                    <h2 class="${won ? 'result-win' : 'result-lose'}">
                        ${won ? 'üèÜ –ü–û–ë–ï–î–ê!' : 'üòî –ü–û–†–ê–ñ–ï–ù–ò–ï'}
                    </h2>
                    
                    <div class="race-times">
                        <div>
                            <p>–í–∞—à–µ –≤—Ä–µ–º—è</p>
                            <p class="time-value">${playerTime.toFixed(2)} —Å–µ–∫</p>
                        </div>
                        <div>
                            <p>–í—Ä–µ–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</p>
                            <p class="time-value">${opponentTime.toFixed(2)} —Å–µ–∫</p>
                        </div>
                    </div>
                    
                    <div class="race-rewards">
                        ${won ? 
                            `<p class="reward-money">+$${rewards.money}</p>` :
                            `<p class="reward-money">-$${rewards.bet}</p>`
                        }
                        <p class="reward-xp">+${rewards.xp} XP</p>
                    </div>
                    
                    <div class="result-actions">
                        <button class="action-button" onclick="showRaceMenu()">
                            –ù–æ–≤–∞—è –≥–æ–Ω–∫–∞
                        </button>
                        <button class="action-button secondary" onclick="showMainMenu()">
                            –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export function showNotification(message, type = 'info') {
    const notification = dom.get('#error-notification') || dom.createElement('div', {
        id: 'error-notification',
        className: 'notification'
    });
    
    notification.textContent = message;
    notification.className = `notification ${type}`;
    
    if (!notification.parentNode) {
        document.body.appendChild(notification);
    }
    
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}