// modules/auth.js
// –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

import { gameState, gameData, updateGameData } from './game-data.js';
import { storage, updatePlayerInfo, startAutoSave, stopAutoSave, startFuelUpdates, stopFuelUpdates, startInfoBarUpdates, showError } from './utils.js';
import { showAuthScreen, showGame, showMainMenu } from './navigation.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã
function initializeCarUpgrades(car) {
    if (!car.upgrades) {
        car.upgrades = {
            engine: 0,
            turbo: 0,
            tires: 0,
            suspension: 0,
            transmission: 0
        };
    }
    
    if (!car.specialParts) {
        car.specialParts = {
            nitro: false,
            bodyKit: false,
            ecuTune: false,
            fuelTank: false
        };
    }
    
    if (car.fuel === undefined) {
        car.fuel = 30;
    }
    if (car.maxFuel === undefined) {
        car.maxFuel = car.specialParts.fuelTank ? 40 : 30;
    }
    if (!car.lastFuelUpdate) {
        car.lastFuelUpdate = new Date().toISOString();
    }
    
    return car;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export async function register(username, password) {
    try {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const data = await window.registerAPI(username, password);
        gameState.currentUser = { username: data.user.username };
        gameState.currentUserId = data.user.id;
        updateGameData(data.user.gameData);
        
        if (!gameData.experience) gameData.experience = 0;
        
        if (gameData.cars) {
            gameData.cars.forEach(car => initializeCarUpgrades(car));
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try {
            if (typeof window.syncAchievementsWithServer === 'function') {
                await window.syncAchievementsWithServer();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
        }
        
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        return false;
    }
}

// –í—Ö–æ–¥
export async function login(username, password) {
    try {
        console.log('üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
        const data = await window.loginAPI(username, password);
        gameState.currentUser = { username: data.user.username };
        gameState.currentUserId = data.user.id;
        updateGameData(data.user.gameData);
        
        if (!gameData.experience) gameData.experience = 0;
        
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:', gameData);
        
        if (gameData.cars) {
            gameData.cars.forEach(car => {
                console.log('üöó –ú–∞—à–∏–Ω–∞ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', car);
                initializeCarUpgrades(car);
                console.log('üöó –ú–∞—à–∏–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', car);
            });
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try {
            if (typeof window.syncAchievementsWithServer === 'function') {
                await window.syncAchievementsWithServer();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.message);
        }
        
        console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        return false;
    }
}

// –í—ã—Ö–æ–¥
export function logout() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        stopAutoSave();
        stopFuelUpdates();
        window.logoutAPI();
        gameState.currentUser = null;
        showAuthScreen();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export async function checkAuth() {
    const token = storage.getItem('authToken');
    if (!token) {
        console.log('üîë –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return false;
    }
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        const data = await window.loadGameData();
        gameState.currentUser = { username: data.username };
        gameState.currentUserId = data.userId;
        updateGameData(data.gameData);
        
        if (!gameData.experience) gameData.experience = 0;
        
        if (gameData.cars) {
            gameData.cars.forEach(car => initializeCarUpgrades(car));
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try {
            if (typeof window.syncAchievementsWithServer === 'function') {
                await window.syncAchievementsWithServer();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
        }
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        storage.removeItem('authToken');
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
export async function handleLogin() {
    const username = document.getElementById('login-username').value.trim();
    const password = document.getElementById('login-password').value;
    
    if (!username || !password) {
        showError('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }
    
    try {
        const success = await login(username, password);
        if (success) {
            showGameFunc();
        }
    } catch (error) {
        console.log('‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è');
    }
}

export async function handleRegister() {
    const username = document.getElementById('register-username').value.trim();
    const password = document.getElementById('register-password').value;
    const passwordConfirm = document.getElementById('register-password-confirm').value;
    
    if (!username || !password) {
        showError('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }
    
    if (username.length < 3) {
        showError('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    if (password.length < 6) {
        showError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    if (password !== passwordConfirm) {
        showError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        return;
    }
    
    try {
        const success = await register(username, password);
        if (success) {
            showGameFunc();
        }
    } catch (error) {
        console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
export function showLoginForm() {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    
    if (loginForm) loginForm.classList.add('active');
    if (registerForm) registerForm.classList.remove('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export function showRegisterForm() {
    const registerForm = document.getElementById('register-form');
    const loginForm = document.getElementById('login-form');
    
    if (registerForm) registerForm.classList.add('active');
    if (loginForm) loginForm.classList.remove('active');
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ showGameFunc
export function showGameFunc() {
    showGame();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã —Å –Ω–æ–≤–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π
    const avatars = document.querySelectorAll('.player-avatar, .profile-avatar');
    avatars.forEach(avatar => {
        if (gameState.currentUser) {
            avatar.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(gameState.currentUser.username)}&background=ff4444&color=ffffff&size=100`;
        }
    });
    
    updatePlayerInfo();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    startAutoSave();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞
    startFuelUpdates();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    startInfoBarUpdates();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    if (window.updateDailyTasksDisplay) {
        window.updateDailyTasksDisplay();
    }
    
    gameState.navigationHistory = [];
    gameState.currentScreen = 'main-menu';
    showMainMenu(false);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º showGameFunc
window.showGameFunc = showGameFunc;