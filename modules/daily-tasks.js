// modules/daily-tasks.js
// –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

import { gameData, gameState } from './game-data.js';
import { showError, updatePlayerInfo } from './utils.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
const DAILY_TASKS_CONFIG = [
    {
        id: 'daily_races',
        name: 'üèÅ –ì–æ–Ω—â–∏–∫ –¥–Ω—è',
        description: '–ü—Ä–æ–≤–µ–¥–∏ 3 –≥–æ–Ω–∫–∏',
        required: 3,
        reward: 500,
        trackStat: 'totalRaces'
    },
    {
        id: 'daily_wins',
        name: 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
        description: '–í—ã–∏–≥—Ä–∞–π 2 –≥–æ–Ω–∫–∏',
        required: 2,
        reward: 1000,
        trackStat: 'wins'
    },
    {
        id: 'daily_fuel',
        name: '‚õΩ –≠–∫–æ–Ω–æ–º–∏—Å—Ç',
        description: '–ü–æ—Ç—Ä–∞—Ç—å 15 —Ç–æ–ø–ª–∏–≤–∞',
        required: 15,
        reward: 300,
        trackStat: 'fuelSpent'
    },
    {
        id: 'daily_upgrade',
        name: 'üîß –ú–µ—Ö–∞–Ω–∏–∫',
        description: '–ö—É–ø–∏ 1 —É–ª—É—á—à–µ–Ω–∏–µ',
        required: 1,
        reward: 800,
        trackStat: 'upgradesBought'
    },
    {
        id: 'daily_money',
        name: 'üí∞ –ë–æ–≥–∞—á',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π $2000',
        required: 2000,
        reward: 500,
        trackStat: 'moneyEarned'
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ gameData
export function initializeDailyTasks() {
    if (!gameData.dailyTasks) {
        gameData.dailyTasks = {
            tasks: [],
            lastReset: new Date().toDateString(),
            completedToday: 0
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–±—Ä–æ—Å –∑–∞–¥–∞–Ω–∏–π
    checkAndResetDailyTasks();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –∑–∞–¥–∞–Ω–∏–π –≤ –ø–æ–ª–Ω–æ—á—å
export function checkAndResetDailyTasks() {
    const today = new Date().toDateString();
    
    if (gameData.dailyTasks.lastReset !== today) {
        // –ù–æ–≤—ã–π –¥–µ–Ω—å - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
        generateDailyTasks();
        gameData.dailyTasks.lastReset = today;
        gameData.dailyTasks.completedToday = 0;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if (!gameData.dailyStats) {
            gameData.dailyStats = {};
        }
        gameData.dailyStats.totalRaces = gameData.stats.totalRaces;
        gameData.dailyStats.wins = gameData.stats.wins;
        gameData.dailyStats.fuelSpent = 0;
        gameData.dailyStats.upgradesBought = 0;
        gameData.dailyStats.moneyEarned = gameData.stats.moneyEarned;
        
        showError('üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å! –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è!');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å
function generateDailyTasks() {
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º 3
    const shuffled = [...DAILY_TASKS_CONFIG].sort(() => Math.random() - 0.5);
    const selectedTasks = shuffled.slice(0, 3);
    
    gameData.dailyTasks.tasks = selectedTasks.map(config => ({
        ...config,
        progress: 0,
        completed: false,
        claimed: false
    }));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π
export function updateTaskProgress(statType, amount = 1) {
    if (!gameData.dailyTasks || !gameData.dailyTasks.tasks) return;
    
    gameData.dailyTasks.tasks.forEach(task => {
        if (task.completed || task.trackStat !== statType) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (statType) {
            case 'totalRaces':
                task.progress = gameData.stats.totalRaces - (gameData.dailyStats.totalRaces || 0);
                break;
            case 'wins':
                task.progress = gameData.stats.wins - (gameData.dailyStats.wins || 0);
                break;
            case 'fuelSpent':
                gameData.dailyStats.fuelSpent = (gameData.dailyStats.fuelSpent || 0) + amount;
                task.progress = gameData.dailyStats.fuelSpent;
                break;
            case 'upgradesBought':
                gameData.dailyStats.upgradesBought = (gameData.dailyStats.upgradesBought || 0) + amount;
                task.progress = gameData.dailyStats.upgradesBought;
                break;
            case 'moneyEarned':
                task.progress = gameData.stats.moneyEarned - (gameData.dailyStats.moneyEarned || 0);
                break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if (task.progress >= task.required) {
            task.progress = task.required;
            task.completed = true;
            showError(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ "${task.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
export async function claimTaskReward(taskId) {
    const task = gameData.dailyTasks.tasks.find(t => t.id === taskId);
    
    if (!task) {
        showError('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    if (!task.completed) {
        showError('–ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
        return;
    }
    
    if (task.claimed) {
        showError('–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞!');
        return;
    }
    
    // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    gameData.money += task.reward;
    task.claimed = true;
    gameData.dailyTasks.completedToday++;
    
    updatePlayerInfo();
    updateDailyTasksDisplay();
    
    showError(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ $${task.reward} –∑–∞ –∑–∞–¥–∞–Ω–∏–µ "${task.name}"!`);
    
    // –ë–æ–Ω—É—Å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    if (gameData.dailyTasks.completedToday === 3) {
        const bonus = 1000;
        gameData.money += bonus;
        showError(`üåü –ë–æ–Ω—É—Å –∑–∞ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è: $${bonus}!`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    try {
        await saveGameData(gameData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
export function updateDailyTasksDisplay() {
    const tasksContainer = document.getElementById('daily-tasks-list');
    if (!tasksContainer) return;
    
    const tasksHTML = gameData.dailyTasks.tasks.map(task => {
        const progressPercent = Math.min((task.progress / task.required) * 100, 100);
        const statusClass = task.claimed ? 'claimed' : task.completed ? 'completed' : 'active';
        
        return `
            <div class="daily-task-card ${statusClass}">
                <div class="task-header">
                    <span class="task-name">${task.name}</span>
                    <span class="task-reward">$${task.reward}</span>
                </div>
                <div class="task-description">${task.description}</div>
                <div class="task-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progressPercent}%"></div>
                    </div>
                    <span class="progress-text">${task.progress} / ${task.required}</span>
                </div>
                ${task.completed && !task.claimed ? 
                    `<button class="btn-claim" onclick="claimTaskReward('${task.id}')">–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É</button>` : 
                    task.claimed ? '<span class="task-claimed">‚úÖ –ü–æ–ª—É—á–µ–Ω–æ</span>' : ''
                }
            </div>
        `;
    }).join('');
    
    tasksContainer.innerHTML = tasksHTML || '<p class="no-tasks">–ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const taskCounter = document.getElementById('daily-tasks-counter');
    if (taskCounter) {
        const activeTasks = gameData.dailyTasks.tasks.filter(t => t.completed && !t.claimed).length;
        if (activeTasks > 0) {
            taskCounter.style.display = 'block';
            taskCounter.textContent = activeTasks;
        } else {
            taskCounter.style.display = 'none';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏–π
export function initDailyTasksScreen() {
    checkAndResetDailyTasks();
    updateDailyTasksDisplay();
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.claimTaskReward = claimTaskReward;
window.showDailyTasksScreen = initDailyTasksScreen;
window.initDailyTasksScreen = initDailyTasksScreen; // ‚Üê –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
window.updateTaskProgress = updateTaskProgress;
window.updateDailyTasksDisplay = updateDailyTasksDisplay;
window.checkAndResetDailyTasks = checkAndResetDailyTasks;