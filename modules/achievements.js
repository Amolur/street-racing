// modules/achievements.js
// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

import { gameData } from './game-data.js';
import { showError } from './utils.js';

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const allAchievements = [
    // –ì–æ–Ω–æ—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    {
        id: 'first_win',
        name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
        description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≥–æ–Ω–∫—É',
        icon: 'üèÅ',
        category: 'racing',
        condition: () => gameData.stats.wins >= 1,
        progress: () => Math.min(gameData.stats.wins, 1),
        maxProgress: 1
    },
    {
        id: 'speed_demon',
        name: '–î–µ–º–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏',
        description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –≥–æ–Ω–æ–∫',
        icon: 'üî•',
        category: 'racing',
        condition: () => gameData.stats.wins >= 10,
        progress: () => Math.min(gameData.stats.wins, 10),
        maxProgress: 10
    },
    {
        id: 'racing_legend',
        name: '–õ–µ–≥–µ–Ω–¥–∞ –≥–æ–Ω–æ–∫',
        description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 50 –≥–æ–Ω–æ–∫',
        icon: 'üëë',
        category: 'racing',
        condition: () => gameData.stats.wins >= 50,
        progress: () => Math.min(gameData.stats.wins, 50),
        maxProgress: 50
    },
    {
        id: 'marathon_racer',
        name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 100 –≥–æ–Ω–æ–∫',
        icon: 'üèÉ',
        category: 'racing',
        condition: () => gameData.stats.totalRaces >= 100,
        progress: () => Math.min(gameData.stats.totalRaces, 100),
        maxProgress: 100
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –¥–µ–Ω—å–≥–∞–º
    {
        id: 'first_thousand',
        name: '–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ $10,000',
        icon: 'üí∞',
        category: 'money',
        condition: () => gameData.stats.moneyEarned >= 10000,
        progress: () => Math.min(gameData.stats.moneyEarned, 10000),
        maxProgress: 10000
    },
    {
        id: 'money_maker',
        name: '–î–µ–ª–µ—Ü',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ $100,000',
        icon: 'üíé',
        category: 'money',
        condition: () => gameData.stats.moneyEarned >= 100000,
        progress: () => Math.min(gameData.stats.moneyEarned, 100000),
        maxProgress: 100000
    },
    {
        id: 'millionaire',
        name: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ $1,000,000',
        icon: 'üè¶',
        category: 'money',
        condition: () => gameData.money >= 1000000,
        progress: () => Math.min(gameData.money, 1000000),
        maxProgress: 1000000
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    {
        id: 'level_up',
        name: '–†–æ—Å—Ç',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è',
        icon: '‚≠ê',
        category: 'level',
        condition: () => gameData.level >= 5,
        progress: () => Math.min(gameData.level, 5),
        maxProgress: 5
    },
    {
        id: 'experienced',
        name: '–û–ø—ã—Ç–Ω—ã–π',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 15 —É—Ä–æ–≤–Ω—è',
        icon: 'üåü',
        category: 'level',
        condition: () => gameData.level >= 15,
        progress: () => Math.min(gameData.level, 15),
        maxProgress: 15
    },
    {
        id: 'master',
        name: '–ú–∞—Å—Ç–µ—Ä',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 30 —É—Ä–æ–≤–Ω—è',
        icon: 'üí´',
        category: 'level',
        condition: () => gameData.level >= 30,
        progress: () => Math.min(gameData.level, 30),
        maxProgress: 30
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –º–∞—à–∏–Ω–∞–º
    {
        id: 'car_collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
        description: '–ö—É–ø–∏—Ç–µ 5 –º–∞—à–∏–Ω',
        icon: 'üöó',
        category: 'cars',
        condition: () => gameData.cars.length >= 5,
        progress: () => Math.min(gameData.cars.length, 5),
        maxProgress: 5
    },
    {
        id: 'garage_master',
        name: '–í–ª–∞–¥–µ–ª–µ—Ü –≥–∞—Ä–∞–∂–∞',
        description: '–ö—É–ø–∏—Ç–µ 10 –º–∞—à–∏–Ω',
        icon: 'üè≠',
        category: 'cars',
        condition: () => gameData.cars.length >= 10,
        progress: () => Math.min(gameData.cars.length, 10),
        maxProgress: 10
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º
    {
        id: 'first_upgrade',
        name: '–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
        description: '–£–ª—É—á—à–∏—Ç–µ –ª—é–±—É—é –¥–µ—Ç–∞–ª—å',
        icon: 'üîß',
        category: 'upgrades',
        condition: () => {
            if (!gameData.cars || !gameData.cars[gameData.currentCar]) return false;
            const car = gameData.cars[gameData.currentCar];
            if (!car.upgrades) return false;
            return Object.values(car.upgrades).some(level => level > 0);
        },
        progress: () => {
            if (!gameData.cars || !gameData.cars[gameData.currentCar]) return 0;
            const car = gameData.cars[gameData.currentCar];
            if (!car.upgrades) return 0;
            return Object.values(car.upgrades).some(level => level > 0) ? 1 : 0;
        },
        maxProgress: 1
    },
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è tuning_expert
    {
        id: 'tuning_expert',
        name: '–≠–∫—Å–ø–µ—Ä—Ç —Ç—é–Ω–∏–Ω–≥–∞',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç–µ –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å',
        icon: '‚öôÔ∏è',
        category: 'upgrades',
        condition: () => {
            if (!gameData.cars[gameData.currentCar]?.upgrades) return false;
            return Object.values(gameData.cars[gameData.currentCar].upgrades).some(level => level >= 10);
        },
        progress: () => {
            if (!gameData.cars[gameData.currentCar]?.upgrades) return 0;
            return Math.max(...Object.values(gameData.cars[gameData.currentCar].upgrades));
        },
        maxProgress: 10
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ gameData
export function initializeAchievements() {
    if (!gameData.achievements) {
        gameData.achievements = [];
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º
export async function syncAchievementsWithServer() {
    try {
        if (typeof window.getAchievements !== 'function') {
            console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è getAchievements –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
            return false;
        }
        
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
        const serverAchievements = await window.getAchievements();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        gameData.achievements = serverAchievements.achievements || [];
        
        console.log(`‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${gameData.achievements.length} —à—Ç.`);
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
export async function checkAllAchievements() {
    initializeAchievements();
    
    let newAchievements = [];
    
    allAchievements.forEach(achievement => {
        const isUnlocked = gameData.achievements.some(a => a.id === achievement.id);
        
        if (!isUnlocked && achievement.condition()) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            gameData.achievements.push({
                id: achievement.id,
                unlockedAt: new Date().toISOString()
            });
            
            newAchievements.push({
                id: achievement.id,
                name: achievement.name,
                description: achievement.description
            });
        }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (newAchievements.length > 0) {
        try {
            if (typeof window.unlockAchievementsBatch === 'function') {
                const result = await window.unlockAchievementsBatch(newAchievements);
                
                if (result.success) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
                    newAchievements.forEach(achievement => {
                        showError(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}!`);
                    });
                    
                    console.log(`‚úÖ ${newAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
                }
            } else {
                console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è unlockAchievementsBatch –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
                newAchievements.forEach(achievement => {
                    showError(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}!`);
                });
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
            newAchievements.forEach(achievement => {
                showError(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}!`);
            });
        }
    }
    
    return newAchievements.length > 0;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
export function getAchievementStatus(achievementId) {
    initializeAchievements();
    return gameData.achievements.some(a => a.id === achievementId);
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export function getAchievementsStats() {
    initializeAchievements();
    const unlockedCount = gameData.achievements.length;
    const totalCount = allAchievements.length;
    
    return {
        unlocked: unlockedCount,
        total: totalCount,
        percentage: Math.round((unlockedCount / totalCount) * 100)
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export function updateAchievementsDisplay() {
    const achievementsList = document.getElementById('achievements-list');
    if (!achievementsList) return;
    
    initializeAchievements();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = getAchievementsStats();
    const unlockedEl = document.getElementById('unlocked-achievements');
    const totalEl = document.getElementById('total-achievements');
    const countEl = document.getElementById('achievements-count');
    
    if (unlockedEl) unlockedEl.textContent = stats.unlocked;
    if (totalEl) totalEl.textContent = stats.total;
    if (countEl) countEl.textContent = stats.unlocked;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievementsHTML = allAchievements.map(achievement => {
        const isUnlocked = getAchievementStatus(achievement.id);
        const progress = achievement.progress();
        const maxProgress = achievement.maxProgress;
        const progressPercent = Math.min((progress / maxProgress) * 100, 100);
        
        return `
            <div class="achievement-card ${isUnlocked ? 'unlocked' : 'locked'}">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-info">
                    <div class="achievement-name">${achievement.name}</div>
                    <div class="achievement-description">${achievement.description}</div>
                    ${!isUnlocked ? `
                        <div class="achievement-progress">
                            –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}/${maxProgress}
                        </div>
                        <div class="progress-bar" style="margin-top: 4px; height: 4px;">
                            <div class="progress-fill" style="width: ${progressPercent}%"></div>
                        </div>
                    ` : ''}
                </div>
                <div class="achievement-status ${isUnlocked ? 'unlocked' : 'locked'}">
                    ${isUnlocked ? '‚úì' : `${progress}/${maxProgress}`}
                </div>
            </div>
        `;
    }).join('');
    
    achievementsList.innerHTML = achievementsHTML;
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.updateAchievementsDisplay = updateAchievementsDisplay;
window.checkAllAchievements = checkAllAchievements;
window.syncAchievementsWithServer = syncAchievementsWithServer;