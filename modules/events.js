// modules/events.js
// –°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π

let currentEvent = null;
let eventCheckInterval = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
export async function checkCurrentEvent() {
    try {
        const response = await fetch(`${window.API_URL}/game/current-event`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
        }
        
        const data = await response.json();
        
        if (data.event) {
            currentEvent = data.event;
            updateEventButton(true);
            updateEventDisplay();
        } else {
            currentEvent = null;
            updateEventButton(false);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function updateEventButton(hasEvent) {
    const eventButton = document.getElementById('event-button');
    if (!eventButton) return;
    
    if (hasEvent) {
        eventButton.style.display = 'block';
        eventButton.classList.add('event-active');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
        eventButton.classList.add('pulse');
    } else {
        eventButton.style.display = 'none';
        eventButton.classList.remove('event-active', 'pulse');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
function updateEventDisplay() {
    const eventScreen = document.getElementById('event-screen');
    if (!eventScreen || !currentEvent) return;
    
    const eventContent = document.getElementById('event-content');
    if (!eventContent) return;
    
    eventContent.innerHTML = `
        <div class="event-card active">
            <div class="event-icon">${currentEvent.icon}</div>
            <h2 class="event-title">${currentEvent.title}</h2>
            <p class="event-description">${currentEvent.description}</p>
            
            <div class="event-timer">
                <span class="timer-label">–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</span>
                <span class="timer-value" id="event-timer">
                    ${currentEvent.timeLeft.hours}—á ${currentEvent.timeLeft.minutes}–º
                </span>
            </div>
            
            <div class="event-effects">
                ${getEventEffectsHTML(currentEvent.type)}
            </div>
            
            <button class="action-button" onclick="goBack()">
                –û—Ç–ª–∏—á–Ω–æ!
            </button>
        </div>
    `;
}

// –ü–æ–ª—É—á–∏—Ç—å HTML —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
function getEventEffectsHTML(eventType) {
    switch (eventType) {
        case 'double_rewards':
            return `
                <div class="effect-item">
                    <span class="effect-icon">üí∞</span>
                    <span class="effect-text">x2 –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—ã</span>
                </div>
            `;
        case 'upgrade_discount':
            return `
                <div class="effect-item">
                    <span class="effect-icon">üîß</span>
                    <span class="effect-text">-50% –Ω–∞ –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è</span>
                </div>
            `;
        case 'free_fuel':
            return `
                <div class="effect-item">
                    <span class="effect-icon">‚õΩ</span>
                    <span class="effect-text">–ì–æ–Ω–∫–∏ –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞</span>
                </div>
            `;
        case 'bonus_xp':
            return `
                <div class="effect-item">
                    <span class="effect-icon">‚≠ê</span>
                    <span class="effect-text">x2 –æ–ø—ã—Ç–∞ –∑–∞ –≤—Å–µ –≥–æ–Ω–∫–∏</span>
                </div>
            `;
        default:
            return '';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Å–æ–±—ã—Ç–∏—è
export function showEventScreen() {
    if (!currentEvent) {
        window.notify('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π', 'info');
        return;
    }
    
    const eventScreen = document.getElementById('event-screen');
    if (eventScreen) {
        document.querySelectorAll('.mobile-screen').forEach(screen => {
            screen.classList.remove('active');
        });
        eventScreen.classList.add('active');
        updateEventDisplay();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π
export function startEventChecking() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    checkCurrentEvent();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    eventCheckInterval = setInterval(() => {
        checkCurrentEvent();
    }, 30000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π
export function stopEventChecking() {
    if (eventCheckInterval) {
        clearInterval(eventCheckInterval);
        eventCheckInterval = null;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
export function getCurrentEvent() {
    return currentEvent;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.checkCurrentEvent = checkCurrentEvent;
window.showEventScreen = showEventScreen;
window.getCurrentEvent = getCurrentEvent;