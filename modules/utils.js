// modules/utils.js
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–æ–≤—ã–º UI (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏)

import { gameState, gameData, fuelSystem } from './game-data.js';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å localStorage
export const storage = {
    getItem: (key) => {
        try {
            return localStorage.getItem(key);
        } catch (e) {
            console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
            return null;
        }
    },
    setItem: (key, value) => {
        try {
            localStorage.setItem(key, value);
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
        }
    },
    removeItem: (key) => {
        try {
            localStorage.removeItem(key);
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ localStorage:', e);
        }
    }
};

// –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
let saveQueue = [];
let isSaving = false;
let unsavedChanges = false;

// –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
export async function queueSave(gameData, priority = 'normal') {
    unsavedChanges = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    saveQueue.push({
        data: JSON.parse(JSON.stringify(gameData)), // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
        priority: priority,
        timestamp: Date.now()
    });
    
    // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
    if (priority === 'critical') {
        await processSaveQueue();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async function processSaveQueue() {
    if (isSaving || saveQueue.length === 0) return;
    
    isSaving = true;
    updateSaveIndicator(null); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
    const latestSave = saveQueue[saveQueue.length - 1];
    saveQueue = []; // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é saveGameData
        if (window.saveGameData) {
            await window.saveGameData(latestSave.data);
        } else {
            throw new Error('saveGameData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        unsavedChanges = false;
        updateSaveIndicator(true);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        saveQueue.push(latestSave); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        updateSaveIndicator(false);
    } finally {
        isSaving = false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
setInterval(processSaveQueue, 5000);

// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', async (e) => {
    if (unsavedChanges) {
        e.preventDefault();
        e.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!';
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try {
            const latestSave = saveQueue[saveQueue.length - 1] || { data: gameData };
            if (window.saveGameData) {
                await window.saveGameData(latestSave.data);
            }
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏');
        }
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
export function updateSaveIndicator(success = null) {
    const indicator = document.getElementById('save-indicator');
    if (!indicator) return;
    
    indicator.classList.remove('saving', 'saved', 'error', 'show');
    
    // –ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    if (success === false) {
        indicator.classList.add('show', 'error');
        const saveText = indicator.querySelector('.save-text');
        if (saveText) saveText.textContent = '–û—à–∏–±–∫–∞!';
        setTimeout(() => {
            indicator.classList.remove('show');
        }, 3000);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–æ–≤–∞—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
export function showError(message) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    let type = 'info';
    
    if (message.includes('‚ùå') || message.includes('–û—à–∏–±–∫–∞') || message.includes('–æ—à–∏–±–∫–∞') || 
        message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ') || message.includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ') ||
        message.includes('–ù–µ–ª—å–∑—è') || message.includes('–Ω–µ–ª—å–∑—è') ||
        message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å') || message.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å')) {
        type = 'error';
    } else if (message.includes('‚úÖ') || message.includes('–£—Å–ø–µ—à–Ω–æ') || message.includes('—É—Å–ø–µ—à–Ω–æ') ||
               message.includes('–ö—É–ø–ª–µ–Ω–æ') || message.includes('–∫—É–ø–ª–µ–Ω–æ') ||
               message.includes('–ü—Ä–æ–¥–∞–Ω–∞') || message.includes('–ø—Ä–æ–¥–∞–Ω–∞')) {
        type = 'success';
    } else if (message.includes('üí∞') || message.includes('$') || message.includes('–ü–æ–ª—É—á–µ–Ω–æ') ||
               message.includes('–ù–∞–≥—Ä–∞–¥–∞') || message.includes('–Ω–∞–≥—Ä–∞–¥–∞') ||
               message.includes('–ë–æ–Ω—É—Å') || message.includes('–±–æ–Ω—É—Å')) {
        type = 'reward';
    } else if (message.includes('‚≠ê') || message.includes('üéâ') || message.includes('—É—Ä–æ–≤–µ–Ω—å') ||
               message.includes('–£—Ä–æ–≤–µ–Ω—å') || message.includes('–ù–æ–≤—ã–π')) {
        type = 'level';
    } else if (message.includes('‚ö°') || message.includes('–Ω–∞–≤—ã–∫') || message.includes('–ù–∞–≤—ã–∫') ||
               message.includes('–ø–æ–≤—ã—à–µ–Ω') || message.includes('–ü–æ–≤—ã—à–µ–Ω')) {
        type = 'skill';
    } else if (message.includes('üèÜ') || message.includes('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ') || message.includes('–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')) {
        type = 'achievement';
    } else if (message.includes('‚õΩ') || message.includes('—Ç–æ–ø–ª–∏–≤') || message.includes('–¢–æ–ø–ª–∏–≤')) {
        type = 'fuel';
    } else if (message.includes('üèÅ') || message.includes('–≥–æ–Ω–∫') || message.includes('–ì–æ–Ω–∫') ||
               message.includes('–ü–æ–±–µ–¥–∞') || message.includes('–ø–æ–±–µ–¥–∞') ||
               message.includes('–ü–æ—Ä–∞–∂–µ–Ω–∏–µ') || message.includes('–ø–æ—Ä–∞–∂–µ–Ω–∏–µ')) {
        type = 'race';
    } else if (message.includes('üöó') || message.includes('–º–∞—à–∏–Ω') || message.includes('–ú–∞—à–∏–Ω') ||
               message.includes('–∞–≤—Ç–æ') || message.includes('–ê–≤—Ç–æ')) {
        type = 'car';
    } else if (message.includes('üîß') || message.includes('—É–ª—É—á—à') || message.includes('–£–ª—É—á—à') ||
               message.includes('—É—Å—Ç–∞–Ω–æ–≤') || message.includes('–£—Å—Ç–∞–Ω–æ–≤')) {
        type = 'upgrade';
    } else if (message.includes('‚ö†Ô∏è') || message.includes('–í–Ω–∏–º–∞–Ω–∏–µ') || message.includes('–≤–Ω–∏–º–∞–Ω–∏–µ') ||
               message.includes('–û—Å—Ç–æ—Ä–æ–∂–Ω–æ') || message.includes('–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ')) {
        type = 'warning';
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (window.notify) {
        window.notify(message, type);
    } else {
        // Fallback –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        showNotificationFallback(message, type);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª fallback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)
function showNotificationFallback(message, type = 'error') {
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    let notification = document.getElementById('temp-notification');
    if (!notification) {
        notification = document.createElement('div');
        notification.id = 'temp-notification';
        notification.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #2d2d2d;
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            border: 2px solid #ff4444;
            z-index: 3000;
            max-width: calc(100vw - 40px);
            font-size: 14px;
            text-align: center;
        `;
        document.body.appendChild(notification);
    }
    
    notification.textContent = message;
    notification.style.display = 'block';
    
    setTimeout(() => {
        if (notification && notification.parentNode) {
            notification.style.display = 'none';
        }
    }, 3000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
export function showLoading(show) {
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    console.log(show ? '–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏...' : '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
export function startAutoSave() {
    if (gameState.autoSaveInterval) {
        clearInterval(gameState.autoSaveInterval);
    }
    
    gameState.autoSaveInterval = setInterval(async () => {
        if (gameState.currentUser && gameData) {
            try {
                await queueSave(gameData, 'normal');
                // console.log('‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å'); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            }
        }
    }, 60000);
}

export function stopAutoSave() {
    if (gameState.autoSaveInterval) {
        clearInterval(gameState.autoSaveInterval);
        gameState.autoSaveInterval = null;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
export function updatePlayerInfo() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ header
    if (gameData) {
        const headerLevelEl = document.getElementById('header-level');
        const headerMoneyEl = document.getElementById('header-money');
        const headerFuelEl = document.getElementById('header-fuel');
        
        if (headerLevelEl) headerLevelEl.textContent = gameData.level;
        if (headerMoneyEl) headerMoneyEl.textContent = gameData.money.toLocaleString();
        
        const currentCar = gameData.cars[gameData.currentCar];
        if (currentCar && headerFuelEl) {
            const currentFuel = fuelSystem.getCurrentFuel(currentCar);
            headerFuelEl.textContent = currentFuel;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        if (gameState.currentScreen === 'main-menu') {
            const playerLevelEl = document.getElementById('player-level');
            const playerWinsEl = document.getElementById('player-wins');
            const playerCarsEl = document.getElementById('player-cars');
            
            if (playerLevelEl) playerLevelEl.textContent = gameData.level;
            if (playerWinsEl) playerWinsEl.textContent = gameData.stats.wins;
            if (playerCarsEl) playerCarsEl.textContent = gameData.cars.length;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω—ã
        const raceBalance = document.getElementById('race-balance');
        if (raceBalance) {
            raceBalance.textContent = gameData.money;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export function updateQuickStats() {
    updatePlayerInfo();
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
export function startFuelUpdates() {
    if (gameState.fuelUpdateInterval) clearInterval(gameState.fuelUpdateInterval);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    gameState.fuelUpdateInterval = setInterval(() => {
        updateFuelDisplay();
        checkFuelRegeneration();
    }, 30000);
    
    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    updateFuelDisplay();
}

export function stopFuelUpdates() {
    if (gameState.fuelUpdateInterval) {
        clearInterval(gameState.fuelUpdateInterval);
        gameState.fuelUpdateInterval = null;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
function checkFuelRegeneration() {
    const car = gameData.cars[gameData.currentCar];
    if (!car) return;
    
    const oldFuel = car.fuel;
    const currentFuel = fuelSystem.getCurrentFuel(car);
    
    // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    if (currentFuel > oldFuel) {
        car.fuel = currentFuel;
        car.lastFuelUpdate = new Date().toISOString();
        
        // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –ø–æ–ª–Ω–æ–µ - —É–≤–µ–¥–æ–º–ª—è–µ–º
        if (currentFuel === car.maxFuel) {
            window.notify('‚õΩ –¢–æ–ø–ª–∏–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'fuel');
        }
        
        updateFuelDisplay();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
export function updateFuelDisplay() {
    const car = gameData.cars[gameData.currentCar];
    if (!car) return;
    
    const currentFuel = fuelSystem.getCurrentFuel(car);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ header
    const headerFuelEl = document.getElementById('header-fuel');
    if (headerFuelEl) {
        headerFuelEl.textContent = currentFuel;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –≥–∞—Ä–∞–∂–µ
    const carFuelDisplay = document.getElementById('car-fuel-display');
    if (carFuelDisplay) {
        carFuelDisplay.textContent = `${currentFuel}/${car.maxFuel || 30}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–µ–Ω—é –≥–æ–Ω–æ–∫
    const raceCarFuel = document.getElementById('race-car-fuel');
    if (raceCarFuel) {
        raceCarFuel.textContent = `${currentFuel}/${car.maxFuel || 30}`;
    }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export function showPlayerInfoBar() {}
export function hidePlayerInfoBar() {}
export function updatePlayerInfoBar() {}
export function startInfoBarUpdates() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∏–Ω—Ñ–æ–±–∞—Ä–∞
    updatePlayerInfo();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!gameState.infoBarUpdateInterval) {
        gameState.infoBarUpdateInterval = setInterval(() => {
            updatePlayerInfo();
        }, 5000);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.queueSave = queueSave;