// modules/race.js
// –ì–æ–Ω–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

import { gameData, gameState } from './game-data.js';
import { showError, updatePlayerInfo } from './utils.js';
import { showRaceResultScreen, showRaceMenu, showMainMenu } from './navigation.js';
import { createOpponentListItem, createRacePreviewModal, createRaceResult } from './ui-components.js';

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º API_URL –∏ authToken –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const getAPI_URL = () => window.API_URL || 'https://street-racing-backend-wnse.onrender.com/api';
const getAuthToken = () => window.getAuthToken ? window.getAuthToken() : null;

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
let serverOpponents = [];

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadOpponents() {
    try {
        const response = await fetch(`${getAPI_URL()}/game/opponents`, {
            headers: {
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            serverOpponents = data.opponents;
            return true;
        }
        return false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤:', error);
        return false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
export async function displayOpponents() {
    const opponentsList = document.getElementById('opponents-list');
    if (!opponentsList) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const raceCurrentCarEl = document.getElementById('race-current-car');
    const raceCarFuelEl = document.getElementById('race-car-fuel');
    const raceBalanceEl = document.getElementById('race-balance');
    
    if (raceCurrentCarEl) raceCurrentCarEl.textContent = currentCar.name;
    if (raceCarFuelEl) raceCarFuelEl.textContent = `${currentCar.fuel}/${currentCar.maxFuel || 30}`;
    if (raceBalanceEl) raceBalanceEl.textContent = gameData.money;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    opponentsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤...</div>';
    
    const loaded = await loadOpponents();
    if (!loaded) {
        opponentsList.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤</p>';
        return;
    }
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const opponents = serverOpponents.map((opp, index) => ({
        ...opp,
        name: getOpponentName(opp.difficultyClass),
        car: getOpponentCar(opp.difficultyClass),
        betAmount: Math.floor(opp.reward / 2)
    }));
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    const opponentsHTML = opponents.map((opponent, index) => {
        const canAfford = gameData.money >= opponent.betAmount && currentCar.fuel >= opponent.fuelCost;
        return createOpponentListItem(opponent, index, canAfford);
    }).join('');
    
    opponentsList.innerHTML = opponentsHTML;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω
function getOpponentName(difficultyClass) {
    const names = {
        easy: ["–ù–æ–≤–∏—á–æ–∫", "–°—Ç—É–¥–µ–Ω—Ç", "–¢–∞–∫—Å–∏—Å—Ç", "–ö—É—Ä—å–µ—Ä"],
        medium: ["–ì–æ–Ω—â–∏–∫", "–î—Ä–∏—Ñ—Ç–µ—Ä", "–°—Ç—Ä–∏—Ç—Ä–µ–π—Å–µ—Ä", "–°–ø–∏–¥—Å—Ç–µ—Ä"],
        hard: ["–ü—Ä–æ—Ñ–∏", "–ú–∞—Å—Ç–µ—Ä", "–ß–µ–º–ø–∏–æ–Ω", "–í–µ—Ç–µ—Ä–∞–Ω"],
        extreme: ["–õ–µ–≥–µ–Ω–¥–∞", "–ü—Ä–∏–∑—Ä–∞–∫", "–ë–æ—Å—Å", "–ö–æ—Ä–æ–ª—å"]
    };
    const nameList = names[difficultyClass] || names.easy;
    return nameList[Math.floor(Math.random() * nameList.length)];
}

function getOpponentCar(difficultyClass) {
    const cars = {
        easy: ["Handa Civic", "Toyata Corolla"],
        medium: ["Mazta RX-7", "Nisan 240SX"],
        hard: ["BMV M3", "Subare WRX"],
        extreme: ["Nisan GT-R", "Toyata Supra"]
    };
    const carList = cars[difficultyClass] || cars.easy;
    return carList[Math.floor(Math.random() * carList.length)];
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function showRacePreview(opponentIndex) {
    const opponent = serverOpponents[opponentIndex];
    if (!opponent) return;
    
    opponent.index = opponentIndex;
    opponent.name = getOpponentName(opponent.difficultyClass);
    opponent.car = getOpponentCar(opponent.difficultyClass);
    
    const currentCar = gameData.cars[gameData.currentCar];
    const betAmount = Math.floor(opponent.reward / 2);
    const fuelCost = opponent.fuelCost;
    const currentFuel = currentCar.fuel;
    
    const modal = createRacePreviewModal(opponent, currentCar, betAmount, fuelCost, currentFuel);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalDiv = document.createElement('div');
    modalDiv.innerHTML = modal;
    document.body.appendChild(modalDiv.firstElementChild);
}

// –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function closeRacePreview() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –≥–æ–Ω–∫—É
export function confirmRace(opponentIndex) {
    closeRacePreview();
    setTimeout(() => {
        startRace(opponentIndex);
    }, 100);
}

// –°—Ç–∞—Ä—Ç –≥–æ–Ω–∫–∏ - –¢–ï–ü–ï–†–¨ –ß–ï–†–ï–ó –°–ï–†–í–ï–†
export async function startRace(opponentIndex) {
    const opponent = serverOpponents[opponentIndex];
    if (!opponent) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    const betAmount = Math.floor(opponent.reward / 2);
    
    if (gameData.money < betAmount) {
        if (window.notify) {
            window.notify(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º $${betAmount}`, 'error');
        } else {
            showError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º $${betAmount}`);
        }
        return;
    }
    
    if (currentCar.fuel < opponent.fuelCost) {
        if (window.notify) {
            window.notify(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞! –ù—É–∂–Ω–æ ${opponent.fuelCost}, –∞ —É –≤–∞—Å ${currentCar.fuel}`, 'error');
        } else {
            showError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞! –ù—É–∂–Ω–æ ${opponent.fuelCost}, –∞ —É –≤–∞—Å ${currentCar.fuel}`);
        }
        return;
    }
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏
        const response = await fetch(`${getAPI_URL()}/game/race`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            },
            body: JSON.stringify({
                carIndex: gameData.currentCar,
                opponentIndex: opponentIndex,
                betAmount: betAmount
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            if (window.notify) {
                window.notify(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏', 'error');
            } else {
                showError(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏');
            }
            return;
        }
        
        const result = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        gameData.money = result.gameData.money;
        gameData.experience = result.gameData.experience;
        gameData.level = result.gameData.level;
        currentCar.fuel = result.gameData.fuel;
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ø–æ—Å–ª–µ –≥–æ–Ω–∫–∏
        if (window.queueSave) {
            await window.queueSave(gameData, 'critical');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (result.result.nitroActivated) {
            if (window.notify) {
                window.notify("üöÄ –ù–∏—Ç—Ä–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!", 'info');
            } else {
                showError("üöÄ –ù–∏—Ç—Ä–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!");
            }
        }
        
        if (result.result.leveledUp) {
            if (window.notify) {
                window.notify(`üéâ –ù–æ–≤—ã–π ${result.gameData.level} —É—Ä–æ–≤–µ–Ω—å! +$${result.result.levelReward}`, 'level');
            } else {
                showError(`üéâ –ù–æ–≤—ã–π ${result.gameData.level} —É—Ä–æ–≤–µ–Ω—å! +$${result.result.levelReward}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (window.checkAllAchievements) {
            window.checkAllAchievements();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
        if (window.skillSystem) {
            const skillResult = window.skillSystem.tryGetSkill(result.result.won);
            if (skillResult.success) {
                const skillNames = {
                    driving: '–í–æ–∂–¥–µ–Ω–∏–µ',
                    speed: '–°–∫–æ—Ä–æ—Å—Ç—å',
                    reaction: '–†–µ–∞–∫—Ü–∏—è',
                    technique: '–¢–µ—Ö–Ω–∏–∫–∞'
                };
                if (window.notify) {
                    window.notify(`‚ö° "${skillNames[skillResult.skill]}" –ø–æ–≤—ã—à–µ–Ω –¥–æ ${skillResult.newLevel}!`, 'skill');
                } else {
                    showError(`‚ö° "${skillNames[skillResult.skill]}" –ø–æ–≤—ã—à–µ–Ω –¥–æ ${skillResult.newLevel}!`);
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showRaceResult(
            result.result.won,
            {
                name: getOpponentName(opponent.difficultyClass),
                car: getOpponentCar(opponent.difficultyClass),
                reward: opponent.reward
            },
            result.result.playerTime,
            result.result.opponentTime,
            result.result.xpGained
        );
        
        updatePlayerInfo();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–æ–Ω–∫–∏:', error);
        if (window.notify) {
            window.notify('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        } else {
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏
export function showRaceResult(won, opponent, playerTime, opponentTime, xpGained) {
    showRaceResultScreen();
    
    const resultDiv = document.getElementById('race-result');
    if (!resultDiv) return;
    
    const rewards = {
        money: won ? opponent.reward : 0,
        bet: Math.floor(opponent.reward / 2),
        xp: xpGained
    };
    
    resultDiv.innerHTML = createRaceResult(won, opponent, playerTime, opponentTime, rewards);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.displayOpponents = displayOpponents;
window.showRacePreview = showRacePreview;
window.closeRacePreview = closeRacePreview;
window.confirmRace = confirmRace;
window.startRace = startRace;