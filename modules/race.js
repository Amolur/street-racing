// modules/race.js
// –ì–æ–Ω–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞

import { gameData, levelSystem, fuelSystem } from './game-data.js';
import { showError, updatePlayerInfo } from './utils.js';
import { calculateTotalStats, initializeCarUpgrades } from './upgrades.js';
import { showRaceResultScreen, showRaceMenu, showMainMenu } from './navigation.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
export function generateDynamicOpponents() {
    const playerLevel = gameData.level;
    const baseOpponents = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4 —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const difficulties = ['easy', 'medium', 'hard', 'extreme'];
    const difficultySettings = {
        easy: { 
            diffMult: 0.8, 
            rewardMult: 0.8,
            names: ["–ù–æ–≤–∏—á–æ–∫", "–°—Ç—É–¥–µ–Ω—Ç", "–¢–∞–∫—Å–∏—Å—Ç", "–ö—É—Ä—å–µ—Ä"]
        },
        medium: { 
            diffMult: 1.0, 
            rewardMult: 1.0,
            names: ["–ì–æ–Ω—â–∏–∫", "–î—Ä–∏—Ñ—Ç–µ—Ä", "–°—Ç—Ä–∏—Ç—Ä–µ–π—Å–µ—Ä", "–°–ø–∏–¥—Å—Ç–µ—Ä"]
        },
        hard: { 
            diffMult: 1.3, 
            rewardMult: 1.5,
            names: ["–ü—Ä–æ—Ñ–∏", "–ú–∞—Å—Ç–µ—Ä", "–ß–µ–º–ø–∏–æ–Ω", "–í–µ—Ç–µ—Ä–∞–Ω"]
        },
        extreme: { 
            diffMult: 1.6, 
            rewardMult: 2.0,
            names: ["–õ–µ–≥–µ–Ω–¥–∞", "–ü—Ä–∏–∑—Ä–∞–∫", "–ë–æ—Å—Å", "–ö–æ—Ä–æ–ª—å"]
        }
    };
    
    const surnames = ["–ò–≤–∞–Ω", "–ü–µ—Ç—Ä", "–ê–ª–µ–∫—Å–µ–π", "–ú–∞–∫—Å–∏–º", "–ê—Ä—Ç–µ–º", "–î–µ–Ω–∏—Å", "–í–∏–∫—Ç–æ—Ä", "–°–µ—Ä–≥–µ–π"];
    
    difficulties.forEach(diff => {
        const settings = difficultySettings[diff];
        const randomName = settings.names[Math.floor(Math.random() * settings.names.length)];
        const randomSurname = surnames[Math.floor(Math.random() * surnames.length)];
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∞—à–∏–Ω—É –¥–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        const maxCarPrice = 5000 + (playerLevel * 5000);
        const availableCars = allCars.filter(car => car.price <= maxCarPrice && car.price > 0);
        const randomCar = availableCars[Math.floor(Math.random() * availableCars.length)] || allCars[1];
        
        // –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã
        const baseDifficulty = 0.7 + (playerLevel * 0.02);
        const difficulty = Number((baseDifficulty * settings.diffMult).toFixed(2));
        const baseReward = 200 + (playerLevel * 100);
        const reward = Math.floor(baseReward * settings.rewardMult / 50) * 50;
        
        baseOpponents.push({
            name: `${randomName} ${randomSurname}`,
            car: randomCar.name,
            difficulty: difficulty,
            reward: reward
        });
    });
    
    return baseOpponents;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
export function displayOpponents() {
    const opponentsList = document.getElementById('opponents-list');
    if (!opponentsList) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–ª–∏–≤–µ
    const currentCar = gameData.cars[gameData.currentCar];
    const currentFuel = fuelSystem.getCurrentFuel(currentCar);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Å —Ç–æ–ø–ª–∏–≤–æ–º
    const raceInfoBanner = document.querySelector('.race-info-banner');
    if (raceInfoBanner) {
        raceInfoBanner.innerHTML = `
            <p>–í–∞—à–∞ –º–∞—à–∏–Ω–∞: <strong id="race-current-car">${currentCar.name}</strong></p>
            <p>–¢–æ–ø–ª–∏–≤–æ: <strong id="race-car-fuel">‚õΩ ${currentFuel}/${currentCar.maxFuel || 30}</strong></p>
            <p>–ë–∞–ª–∞–Ω—Å: <strong>$<span id="race-balance">${gameData.money}</span></strong></p>
        `;
    }
    
    opponentsList.innerHTML = '';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
    const opponents = generateDynamicOpponents();
    
    opponents.forEach((opponent, index) => {
        const betAmount = Math.floor(opponent.reward / 2);
        const fuelCost = fuelSystem.calculateFuelCost(opponent.difficulty);
        const canAfford = gameData.money >= betAmount && currentFuel >= fuelCost;
        
        const opponentCard = document.createElement('div');
        opponentCard.className = 'opponent-card';
        opponentCard.style.opacity = canAfford ? '1' : '0.5';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        let difficultyColor = '';
        if (opponent.difficulty < 1.0) difficultyColor = 'easy';
        else if (opponent.difficulty < 1.4) difficultyColor = 'medium';
        else if (opponent.difficulty < 1.8) difficultyColor = 'hard';
        else difficultyColor = 'extreme';
        
        opponentCard.innerHTML = `
            <div class="opponent-info">
                <h3>${opponent.name}</h3>
                <p class="opponent-car">–ú–∞—à–∏–Ω–∞: ${opponent.car}</p>
                <p class="opponent-difficulty ${difficultyColor}">
                    –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${opponent.difficulty < 1.0 ? '‚≠ê' : 
                                opponent.difficulty < 1.4 ? '‚≠ê‚≠ê' :
                                opponent.difficulty < 1.8 ? '‚≠ê‚≠ê‚≠ê' : '‚≠ê‚≠ê‚≠ê‚≠ê'}
                </p>
                <div class="opponent-stakes">
                    <span class="stake-item">
                        <span class="stake-label">–°—Ç–∞–≤–∫–∞:</span>
                        <span class="stake-value">${betAmount}</span>
                    </span>
                    <span class="stake-item">
                        <span class="stake-label">–í—ã–∏–≥—Ä—ã—à:</span>
                        <span class="stake-value">${opponent.reward}</span>
                    </span>
                    <span class="stake-item">
                        <span class="stake-label">–¢–æ–ø–ª–∏–≤–æ:</span>
                        <span class="stake-value fuel-cost">‚õΩ ${fuelCost}</span>
                    </span>
                </div>
            </div>
            <button class="btn-primary race-btn" onclick="showRacePreview(${index}); return false;" 
                    ${!canAfford ? 'disabled' : ''}>
                ${gameData.money < betAmount ? `–ù—É–∂–Ω–æ ${betAmount}` : 
                  currentFuel < fuelCost ? `–ù—É–∂–Ω–æ ‚õΩ${fuelCost}` : '–í—ã–∑–≤–∞—Ç—å –Ω–∞ –≥–æ–Ω–∫—É'}
            </button>
        `;
        opponentsList.appendChild(opponentCard);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function showRacePreview(opponentIndex) {
    const opponents = generateDynamicOpponents();
    const opponent = opponents[opponentIndex];
    const currentCar = gameData.cars[gameData.currentCar];
    const betAmount = Math.floor(opponent.reward / 2);
    const fuelCost = fuelSystem.calculateFuelCost(opponent.difficulty);
    const currentFuel = fuelSystem.getCurrentFuel(currentCar);
    
    const modal = document.createElement('div');
    modal.className = 'race-preview-modal';
    modal.onclick = function(e) {
        if (e.target === modal) closeRacePreview();
    };
    
    modal.innerHTML = `
        <div class="race-preview-content">
            <button class="close-modal" onclick="closeRacePreview()">√ó</button>
            <h2>–í—ã–∑–æ–≤ –Ω–∞ –≥–æ–Ω–∫—É</h2>
            
            <div class="race-comparison">
                <div class="racer-info player">
                    <h3>${gameState.currentUser.username}</h3>
                    <div class="car-info">
                        <div class="car-image">üöó</div>
                        <h4>${currentCar.name}</h4>
                        <p class="fuel-status">‚õΩ ${currentFuel}/${currentCar.maxFuel || 30}</p>
                    </div>
                    
                    <div class="stats-section">
                        <h5>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h5>
                        <div class="stat-comparison">
                            <span>–ú–æ—â–Ω–æ—Å—Ç—å</span>
                            <div class="stat-bar-comparison">
                                <div class="stat-fill" style="width: ${currentCar.power}%"></div>
                            </div>
                            <span class="stat-number">${currentCar.power}</span>
                        </div>
                        <div class="stat-comparison">
                            <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
                            <div class="stat-bar-comparison">
                                <div class="stat-fill" style="width: ${currentCar.speed}%"></div>
                            </div>
                            <span class="stat-number">${currentCar.speed}</span>
                        </div>
                    </div>
                </div>
                
                <div class="vs-divider">
                    <div class="vs-circle">VS</div>
                    <div class="race-info">
                        <p>–°—Ç–∞–≤–∫–∞: <strong>${betAmount}</strong></p>
                        <p>–í—ã–∏–≥—Ä—ã—à: <strong>${opponent.reward}</strong></p>
                        <p>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: <strong>‚õΩ ${fuelCost}</strong></p>
                    </div>
                </div>
                
                <div class="racer-info opponent">
                    <h3>${opponent.name}</h3>
                    <div class="car-info">
                        <div class="car-image">üèéÔ∏è</div>
                        <h4>${opponent.car}</h4>
                    </div>
                    
                    <div class="stats-section">
                        <h5>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</h5>
                        <div class="difficulty-bar">
                            <div class="difficulty-fill" style="width: ${opponent.difficulty * 60}%"></div>
                        </div>
                        <p class="difficulty-text">${
                            opponent.difficulty < 1 ? '–õ–µ–≥–∫–æ' :
                            opponent.difficulty < 1.3 ? '–°—Ä–µ–¥–Ω–µ' :
                            opponent.difficulty < 1.5 ? '–°–ª–æ–∂–Ω–æ' : '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ'
                        }</p>
                    </div>
                </div>
            </div>
            
            <div class="modal-buttons">
                <button class="btn-primary race-start-btn" onclick="confirmRace(${opponentIndex}); return false;"
                        ${currentFuel < fuelCost ? 'disabled' : ''}>
                    ${currentFuel < fuelCost ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ (–Ω—É–∂–Ω–æ ${fuelCost})` : '–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É!'}
                </button>
                <button class="btn-secondary" onclick="closeRacePreview(); return false;">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function closeRacePreview() {
    const modal = document.querySelector('.race-preview-modal');
    if (modal) {
        modal.remove();
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –≥–æ–Ω–∫—É
export function confirmRace(opponentIndex) {
    closeRacePreview();
    setTimeout(() => {
        startRace(opponentIndex);
    }, 100);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function checkLevelUp() {
    const currentXP = gameData.experience || 0;
    const currentLevelXP = levelSystem.getRequiredXP(gameData.level);
    const nextLevelXP = levelSystem.getRequiredXP(gameData.level + 1);
    
    if (currentXP >= nextLevelXP) {
        gameData.level++;
        const reward = levelSystem.getLevelReward(gameData.level);
        gameData.money += reward;
        
        showError(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${gameData.level} —É—Ä–æ–≤–Ω—è!\n–ù–∞–≥—Ä–∞–¥–∞: $${reward}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
        checkLevelUp();
    }
}

// –†–∞—Å—á–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
function calculateSkillGain(isWin) {
    const skillNames = ['driving', 'speed', 'reaction', 'technique'];
    const skillNamesRu = {
        driving: '–í–æ–∂–¥–µ–Ω–∏–µ',
        speed: '–°–∫–æ—Ä–æ—Å—Ç—å',
        reaction: '–†–µ–∞–∫—Ü–∏—è',
        technique: '–¢–µ—Ö–Ω–∏–∫–∞'
    };
    
    let gainedSkills = [];
    
    const attempts = Math.random() < 0.7 ? 1 : 2;
    const baseChance = isWin ? 0.9 : 0.45;
    
    for (let i = 0; i < attempts; i++) {
        const randomSkill = skillNames[Math.floor(Math.random() * skillNames.length)];
        
        if (gainedSkills.find(s => s.skill === randomSkill)) {
            continue;
        }
        
        const currentSkillLevel = gameData.skills[randomSkill];
        const chance = baseChance / (1 + currentSkillLevel * 0.01);
        
        if (Math.random() < chance && currentSkillLevel < 10) {
            gameData.skills[randomSkill]++;
            gainedSkills.push({
                skill: randomSkill,
                name: skillNamesRu[randomSkill],
                newLevel: gameData.skills[randomSkill],
                chance: (chance * 100).toFixed(1)
            });
        }
    }
    
    return gainedSkills;
}

// –°—Ç–∞—Ä—Ç –≥–æ–Ω–∫–∏
export async function startRace(opponentIndex) {
    const opponents = generateDynamicOpponents();
    const opponent = opponents[opponentIndex];
    const currentCar = gameData.cars[gameData.currentCar];
    
    initializeCarUpgrades(currentCar);
    
    const betAmount = Math.floor(opponent.reward / 2);
    const fuelCost = fuelSystem.calculateFuelCost(opponent.difficulty);
    const currentFuel = fuelSystem.getCurrentFuel(currentCar);
    
    if (gameData.money < betAmount) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${betAmount}`);
        return;
    }
    
    if (currentFuel < fuelCost) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞! –ù—É–∂–Ω–æ ${fuelCost}, –∞ —É –≤–∞—Å ${currentFuel}`);
        return;
    }
    
    // –¢—Ä–∞—Ç–∏–º —Ç–æ–ø–ª–∏–≤–æ
    currentCar.fuel = currentFuel - fuelCost;
    currentCar.lastFuelUpdate = new Date().toISOString();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —É–ª—É—á—à–µ–Ω–∏–π
    const totalStats = calculateTotalStats(currentCar);
    
    // –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const carPower = (totalStats.power + totalStats.speed + totalStats.handling + totalStats.acceleration) / 4;
    
    // –ë–æ–Ω—É—Å –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
    const skillMultiplier = 1 + (
        gameData.skills.driving * 0.002 +
        gameData.skills.speed * 0.002 +
        gameData.skills.reaction * 0.0015 +
        gameData.skills.technique * 0.0015
    );
    
    let playerEfficiency = carPower * skillMultiplier;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—Ç—Ä–æ
    if (currentCar.specialParts && currentCar.specialParts.nitro && Math.random() < 0.3) {
        playerEfficiency *= 1.2;
        showError("üöÄ –ù–∏—Ç—Ä–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!");
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    const opponentEfficiency = 60 * opponent.difficulty;
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    const trackBaseTime = 60;
    const playerRandomFactor = 0.95 + Math.random() * 0.1;
    const opponentRandomFactor = 0.95 + Math.random() * 0.1;
    
    const playerTime = trackBaseTime * (100 / playerEfficiency) * playerRandomFactor;
    const opponentTime = trackBaseTime * (100 / opponentEfficiency) * opponentRandomFactor;
    
    const won = playerTime < opponentTime;
    
    // –†–∞—Å—á–µ—Ç –æ–ø—ã—Ç–∞
    const xpGained = levelSystem.calculateXPGain(won, opponent.difficulty, betAmount);
    gameData.experience = (gameData.experience || 0) + xpGained;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
gameData.stats.totalRaces++;
if (won) {
    gameData.stats.wins++;
    gameData.stats.moneyEarned += opponent.reward;
    gameData.money += opponent.reward;
} else {
    gameData.stats.losses++;
    gameData.stats.moneySpent += betAmount;
    gameData.money -= betAmount;
}

// –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –°–¢–†–û–ö–ò:
// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
if (window.updateTaskProgress) {
    window.updateTaskProgress('totalRaces');
    window.updateTaskProgress('fuelSpent', fuelCost);
    if (won) {
        window.updateTaskProgress('wins');
        window.updateTaskProgress('moneyEarned', opponent.reward);
    }
}
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    const gainedSkills = calculateSkillGain(won);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    checkLevelUp();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    showRaceResult(won, opponent, playerTime, opponentTime, xpGained, gainedSkills, fuelCost, currentCar);
    
    updatePlayerInfo();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try {
        await saveGameData(gameData);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–Ω–∫–∏:', error);
        showError('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏ –º–æ–∂–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–Ω–∫–∏
function showRaceResult(won, opponent, playerTime, opponentTime, xpGained, gainedSkills, fuelCost, car) {
    showRaceResultScreen();
    
    const resultDiv = document.getElementById('race-result');
    let skillsHTML = '';
    
    if (gainedSkills.length > 0) {
        skillsHTML = '<div class="skill-gain"><h4>–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–≤—ã–∫–∏:</h4>';
        gainedSkills.forEach(skill => {
            skillsHTML += `<p class="skill-gain-item">‚ú® ${skill.name} +1 (—É—Ä–æ–≤–µ–Ω—å ${skill.newLevel})</p>`;
        });
        skillsHTML += '</div>';
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ –æ–ø—ã—Ç–∞
    const currentXP = gameData.experience || 0;
    const currentLevelXP = levelSystem.getRequiredXP(gameData.level);
    const nextLevelXP = levelSystem.getRequiredXP(gameData.level + 1);
    const progressXP = currentXP - currentLevelXP;
    const neededXP = nextLevelXP - currentLevelXP;
    const xpPercent = Math.floor((progressXP / neededXP) * 100);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–ª–∏–≤–µ
    const fuelInfo = `
        <div class="fuel-spent-info">
            <p>‚õΩ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–ø–ª–∏–≤–∞: ${fuelCost}</p>
            <p>‚õΩ –û—Å—Ç–∞–ª–æ—Å—å: ${car.fuel}/${car.maxFuel || 30}</p>
        </div>
    `;
    
    if (won) {
        resultDiv.innerHTML = `
            <div class="result-container">
                <h2 class="result-title win">üèÜ –ü–û–ë–ï–î–ê!</h2>
                <div class="result-animation">üéâ</div>
                
                <div class="result-info">
                    <p>–í—ã –æ–±–æ–≥–Ω–∞–ª–∏ <strong>${opponent.name}</strong>!</p>
                    
                    <div class="race-times">
                        <div class="time-block player">
                            <h4>–í–∞—à–µ –≤—Ä–µ–º—è</h4>
                            <p class="time-value">${playerTime.toFixed(2)} —Å–µ–∫</p>
                        </div>
                        <div class="time-block opponent">
                            <h4>–í—Ä–µ–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</h4>
                            <p class="time-value">${opponentTime.toFixed(2)} —Å–µ–∫</p>
                        </div>
                    </div>
                    
                    <div class="result-rewards">
                        <p class="reward-item">üí∞ –í—ã–∏–≥—Ä—ã—à: <span class="money-gain">+${opponent.reward}</span></p>
                        <p class="reward-item">‚≠ê –û–ø—ã—Ç: <span class="xp-gain">+${xpGained} XP</span></p>
                        <p class="balance">–ë–∞–ª–∞–Ω—Å: ${gameData.money}</p>
                    </div>
                    
                    ${fuelInfo}
                    
                    <div class="xp-progress-section">
                        <p>–£—Ä–æ–≤–µ–Ω—å ${gameData.level}: ${currentXP} / ${nextLevelXP} XP</p>
                        <div class="xp-progress-bar">
                            <div class="xp-progress-fill" style="width: ${xpPercent}%"></div>
                        </div>
                    </div>
                    
                    ${skillsHTML}
                </div>
                
                <div class="result-actions">
                    <button class="btn-primary" onclick="showRaceMenu()">–ù–æ–≤–∞—è –≥–æ–Ω–∫–∞</button>
                    <button class="btn-secondary" onclick="showMainMenu()">–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
                </div>
            </div>
        `;
    } else {
        resultDiv.innerHTML = `
            <div class="result-container">
                <h2 class="result-title lose">üòî –ü–û–†–ê–ñ–ï–ù–ò–ï</h2>
                
                <div class="result-info">
                    <p><strong>${opponent.name}</strong> –æ–∫–∞–∑–∞–ª—Å—è –±—ã—Å—Ç—Ä–µ–µ!</p>
                    
                    <div class="race-times">
                        <div class="time-block player">
                            <h4>–í–∞—à–µ –≤—Ä–µ–º—è</h4>
                            <p class="time-value">${playerTime.toFixed(2)} —Å–µ–∫</p>
                        </div>
                        <div class="time-block opponent">
                            <h4>–í—Ä–µ–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</h4>
                            <p class="time-value">${opponentTime.toFixed(2)} —Å–µ–∫</p>
                        </div>
                    </div>
                    
                    <div class="result-rewards">
                        <p class="reward-item">üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: <span class="money-loss">-${Math.floor(opponent.reward / 2)}</span></p>
                        <p class="reward-item">‚≠ê –û–ø—ã—Ç: <span class="xp-gain">+${xpGained} XP</span></p>
                        <p class="balance">–ë–∞–ª–∞–Ω—Å: ${gameData.money}</p>
                    </div>
                    
                    ${fuelInfo}
                    
                    <div class="xp-progress-section">
                        <p>–£—Ä–æ–≤–µ–Ω—å ${gameData.level}: ${currentXP} / ${nextLevelXP} XP</p>
                        <div class="xp-progress-bar">
                            <div class="xp-progress-fill" style="width: ${xpPercent}%"></div>
                        </div>
                    </div>
                    
                    ${skillsHTML}
                </div>
                
                <div class="result-actions">
                    <button class="btn-primary" onclick="showRaceMenu()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                    <button class="btn-secondary" onclick="showMainMenu()">–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
                </div>
            </div>
        `;
    }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
import { gameState, allCars } from './game-data.js';

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
window.displayOpponents = displayOpponents;