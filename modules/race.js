// modules/race.js
// –ì–æ–Ω–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –≥–æ–Ω–æ–∫

import { gameData, gameState, fuelSystem } from './game-data.js';
import { showError, updatePlayerInfo } from './utils.js';
import { showRaceResultScreen, showRaceMenu, showMainMenu } from './navigation.js';
import { createOpponentListItem, createRacePreviewModal, createRaceResult } from './ui-components.js';

// –¢–∏–ø—ã –≥–æ–Ω–æ–∫
export const raceTypes = {
    classic: {
        name: "–ö–ª–∞—Å—Å–∏–∫–∞",
        icon: "üèÅ",
        description: "–û–±—ã—á–Ω–∞—è –≥–æ–Ω–∫–∞ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å",
        fuelMultiplier: 1,
        rewardMultiplier: 1,
        xpMultiplier: 1,
        mainStat: "speed"
    },
    drift: {
        name: "–î—Ä–∏—Ñ—Ç",
        icon: "üåÄ",
        description: "–û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∞ –≤–æ–∂–¥–µ–Ω–∏—è",
        fuelMultiplier: 0.8,
        rewardMultiplier: 1.2,
        xpMultiplier: 1.5,
        mainStat: "technique"
    },
    sprint: {
        name: "–°–ø—Ä–∏–Ω—Ç",
        icon: "‚ö°",
        description: "–ö–æ—Ä–æ—Ç–∫–∞—è –≥–æ–Ω–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏",
        fuelMultiplier: 0.5,
        rewardMultiplier: 0.7,
        xpMultiplier: 0.8,
        mainStat: "acceleration"
    },
    endurance: {
        name: "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        icon: "üèÉ",
        description: "–î–ª–∏–Ω–Ω–∞—è –≥–æ–Ω–∫–∞ –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        fuelMultiplier: 2,
        rewardMultiplier: 2,
        xpMultiplier: 2.5,
        mainStat: "handling"
    }
};

// –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≥–æ–Ω–∫–∏
let currentRaceType = 'classic';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
let serverOpponents = [];

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –≥–æ–Ω–∫–∏
export function switchRaceType(type) {
    if (raceTypes[type]) {
        currentRaceType = type;
        displayOpponents();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.race-type-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        const activeBtn = document.querySelector(`[data-race-type="${type}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadOpponents() {
    try {
        const response = await fetch(`${window.API_URL}/game/opponents`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            serverOpponents = data.opponents;
            return true;
        }
        return false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤:', error);
        return false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
export async function displayOpponents() {
    const opponentsList = document.getElementById('opponents-list');
    if (!opponentsList) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    const raceType = raceTypes[currentRaceType];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    document.getElementById('race-current-car').textContent = currentCar.name;
    
    // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const currentFuel = fuelSystem.getCurrentFuel(currentCar);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞
    document.getElementById('race-car-fuel').textContent = `${currentFuel}/${currentCar.maxFuel || 30}`;
    document.getElementById('race-balance').textContent = gameData.money;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø–ª–∏–≤–æ –≤ header
    const headerFuelEl = document.getElementById('header-fuel');
    if (headerFuelEl) {
        headerFuelEl.textContent = currentFuel;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    const raceTypeInfo = document.getElementById('race-type-info');
    if (raceTypeInfo) {
        raceTypeInfo.innerHTML = `
            <div class="race-type-description">
                <span class="race-type-icon">${raceType.icon}</span>
                <span class="race-type-name">${raceType.name}:</span>
                <span class="race-type-desc">${raceType.description}</span>
            </div>
        `;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    opponentsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤...</div>';
    
    const loaded = await loadOpponents();
    if (!loaded) {
        opponentsList.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤</p>';
        return;
    }
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≥–æ–Ω–∫–∏
    const opponents = serverOpponents.map((opp, index) => {
        const baseFuelCost = opp.fuelCost;
        const adjustedFuelCost = Math.ceil(baseFuelCost * raceType.fuelMultiplier);
        const adjustedReward = Math.floor(opp.reward * raceType.rewardMultiplier);
        
        return {
            ...opp,
            name: getOpponentName(opp.difficultyClass, currentRaceType),
            car: getOpponentCar(opp.difficultyClass),
            betAmount: Math.floor(adjustedReward / 2),
            fuelCost: adjustedFuelCost,
            reward: adjustedReward,
            originalIndex: index
        };
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    const opponentsHTML = opponents.map((opponent, index) => {
        const canAfford = gameData.money >= opponent.betAmount && currentFuel >= opponent.fuelCost;
        return createOpponentListItem(opponent, index, canAfford);
    }).join('');
    
    opponentsList.innerHTML = opponentsHTML;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω
function getOpponentName(difficultyClass, raceType) {
    const names = {
        classic: {
            easy: ["–ù–æ–≤–∏—á–æ–∫", "–°—Ç—É–¥–µ–Ω—Ç", "–¢–∞–∫—Å–∏—Å—Ç", "–ö—É—Ä—å–µ—Ä"],
            medium: ["–ì–æ–Ω—â–∏–∫", "–°—Ç—Ä–∏—Ç—Ä–µ–π—Å–µ—Ä", "–°–ø–∏–¥—Å—Ç–µ—Ä", "–í–µ—Ç–µ—Ä–∞–Ω"],
            hard: ["–ü—Ä–æ—Ñ–∏", "–ú–∞—Å—Ç–µ—Ä", "–ß–µ–º–ø–∏–æ–Ω", "–≠–∫—Å–ø–µ—Ä—Ç"],
            extreme: ["–õ–µ–≥–µ–Ω–¥–∞", "–ü—Ä–∏–∑—Ä–∞–∫", "–ë–æ—Å—Å", "–ö–æ—Ä–æ–ª—å"]
        },
        drift: {
            easy: ["–°–ª–∞–π–¥–µ—Ä", "–î—Ä–∏—Ñ—Ç–µ—Ä", "–Æ–Ω–µ—Ü", "–£—á–µ–Ω–∏–∫"],
            medium: ["–¢–æ–∫–∏–π—Å–∫–∏–π –¥—Ä–∏—Ñ—Ç–µ—Ä", "–ë–æ–∫–æ–≤–æ–π –≥–æ–Ω—â–∏–∫", "–ú–∞—Å—Ç–µ—Ä –∑–∞–Ω–æ—Å–∞", "–°–∫–æ–ª—å–∑—è—â–∏–π"],
            hard: ["–ö–æ—Ä–æ–ª—å –¥—Ä–∏—Ñ—Ç–∞", "–ú–∞—Å—Ç–µ—Ä —É–≥–ª–∞", "–î—ã–º–æ–≤–æ–π –¥–µ–º–æ–Ω", "–ü—Ä–æ—Ñ–∏ –¥—Ä–∏—Ñ—Ç–∞"],
            extreme: ["–õ–µ–≥–µ–Ω–¥–∞ –¢–æ–∫–∏–æ", "–î—Ä–∏—Ñ—Ç-–±–æ—Å—Å", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –∑–∞–Ω–æ—Å–æ–≤", "–î—ã–º-–º–∞—à–∏–Ω–∞"]
        },
        sprint: {
            easy: ["–°–ø—Ä–∏–Ω—Ç–µ—Ä", "–ë—ã—Å—Ç—Ä—ã–π", "–†–µ–∑–≤—ã–π", "–¢–æ—Ä–æ–ø—ã–≥–∞"],
            medium: ["–ú–æ–ª–Ω–∏—è", "–†–∞–∫–µ—Ç–∞", "–°—Ç—Ä–µ–ª–∞", "–í—Å–ø—ã—à–∫–∞"],
            hard: ["–°–≤–µ—Ä—Ö–∑–≤—É–∫", "–¢—É—Ä–±–æ-–≥–æ–Ω—â–∏–∫", "–ù–∏—Ç—Ä–æ-–º–∞—Å—Ç–µ—Ä", "–°–∫–æ—Ä–æ—Å—Ç—å"],
            extreme: ["–°–≤–µ—Ç–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", "–°–æ–Ω–∏–∫", "–§–ª—ç—à", "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π"]
        },
        endurance: {
            easy: ["–°—Ç–æ–π–∫–∏–π", "–£–ø–æ—Ä–Ω—ã–π", "–í—ã–Ω–æ—Å–ª–∏–≤—ã–π", "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü"],
            medium: ["–ñ–µ–ª–µ–∑–Ω—ã–π", "–ù–µ—É—Ç–æ–º–∏–º—ã–π", "–î–∞–ª—å–Ω–æ–±–æ–π", "–°—Ç–∞–ª—å–Ω–æ–π"],
            hard: ["–ù–µ—Å–æ–∫—Ä—É—à–∏–º—ã–π", "–¢–∏—Ç–∞–Ω", "–ú–∞—à–∏–Ω–∞", "–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä"],
            extreme: ["–í–µ—á–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å", "–ù–µ–æ—Å—Ç–∞–Ω–æ–≤–∏–º—ã–π", "–õ–µ–≥–µ–Ω–¥–∞ —Ç—Ä–∞—Å—Å—ã", "–ö–æ—Ä–æ–ª—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"]
        }
    };
    
    const typeNames = names[raceType] || names.classic;
    const nameList = typeNames[difficultyClass] || typeNames.easy;
    return nameList[Math.floor(Math.random() * nameList.length)];
}

function getOpponentCar(difficultyClass) {
    const cars = {
        easy: ["Handa Civic", "Toyata Corolla"],
        medium: ["Mazta RX-7", "Nisan 240SX"],
        hard: ["BMV M3", "Subare WRX"],
        extreme: ["Nisan GT-R", "Toyata Supra"]
    };
    const carList = cars[difficultyClass] || cars.easy;
    return carList[Math.floor(Math.random() * carList.length)];
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function showRacePreview(opponentIndex) {
    const opponent = serverOpponents[opponentIndex];
    if (!opponent) return;
    
    const raceType = raceTypes[currentRaceType];
    opponent.index = opponentIndex;
    opponent.name = getOpponentName(opponent.difficultyClass, currentRaceType);
    opponent.car = getOpponentCar(opponent.difficultyClass);
    
    const currentCar = gameData.cars[gameData.currentCar];
    const betAmount = Math.floor(opponent.reward * raceType.rewardMultiplier / 2);
    const fuelCost = Math.ceil(opponent.fuelCost * raceType.fuelMultiplier);
    const currentFuel = fuelSystem.getCurrentFuel(currentCar);
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–≤—å—é
    const modifiedOpponent = {
        ...opponent,
        reward: Math.floor(opponent.reward * raceType.rewardMultiplier),
        fuelCost: fuelCost,
        raceType: raceType
    };
    
    const modal = createRacePreviewModal(modifiedOpponent, currentCar, betAmount, fuelCost, currentFuel);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalDiv = document.createElement('div');
    modalDiv.innerHTML = modal;
    document.body.appendChild(modalDiv.firstElementChild);
}

// –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é –≥–æ–Ω–∫–∏
export function closeRacePreview() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–Ω–∫–∏
export function confirmRace(opponentIndex) {
    closeRacePreview();
    startRace(opponentIndex);
}

export async function startRace(opponentIndex) {
    const opponent = serverOpponents[opponentIndex];
    if (!opponent) return;
    
    const currentCar = gameData.cars[gameData.currentCar];
    const raceType = raceTypes[currentRaceType];
    const betAmount = Math.floor(opponent.reward * raceType.rewardMultiplier / 2);
    const fuelCost = Math.ceil(opponent.fuelCost * raceType.fuelMultiplier);
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    if (gameData.money < betAmount) {
        window.notify(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º $${betAmount}`, 'error');
        return;
    }
    
    const currentFuel = fuelSystem.getCurrentFuel(currentCar);
    if (currentFuel < fuelCost) {
        window.notify(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞! –ù—É–∂–Ω–æ ${fuelCost}, –∞ —É –≤–∞—Å ${currentFuel}`, 'error');
        return;
    }
    
    try {
        // –í–°–Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä - –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ!
        const response = await fetch(`${window.API_URL}/game/race`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({
                carIndex: gameData.currentCar,
                opponentIndex: opponentIndex,
                betAmount: betAmount,
                raceType: currentRaceType,
                fuelCost: fuelCost
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            window.notify(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏', 'error');
            return;
        }
        
        const result = await response.json();
        
        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        gameData.money = result.gameData.money;
        gameData.experience = result.gameData.experience;
        gameData.level = result.gameData.level;
        gameData.stats = result.gameData.stats;
        gameData.skills = result.gameData.skills;
        currentCar.fuel = result.gameData.fuel;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePlayerInfo();
        if (window.updateFuelDisplay) {
            window.updateFuelDisplay();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showRaceResult(
            result.result.won,
            {
                name: getOpponentName(opponent.difficultyClass, currentRaceType),
                car: getOpponentCar(opponent.difficultyClass),
                reward: Math.floor(opponent.reward * raceType.rewardMultiplier)
            },
            result.result.playerTime,
            result.result.opponentTime,
            result.result.xpGained,
            currentRaceType
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–æ–Ω–∫–∏:', error);
        window.notify('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏
export function showRaceResult(won, opponent, playerTime, opponentTime, xpGained, raceType) {
    showRaceResultScreen();
    
    const resultDiv = document.getElementById('race-result');
    if (!resultDiv) return;
    
    const rewards = {
        money: won ? opponent.reward : 0,
        bet: Math.floor(opponent.reward / 2),
        xp: xpGained,
        raceType: raceTypes[raceType] || raceTypes.classic
    };
    
    resultDiv.innerHTML = createRaceResult(won, opponent, playerTime, opponentTime, rewards);
    
    // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setTimeout(() => {
        if (window.updateFuelDisplay) {
            window.updateFuelDisplay();
        }
        if (window.updatePlayerInfo) {
            window.updatePlayerInfo();
        }
    }, 100);
}

window.displayOpponents = displayOpponents;
window.showRacePreview = showRacePreview;
window.closeRacePreview = closeRacePreview;
window.confirmRace = confirmRace;
window.startRace = startRace;
window.switchRaceType = switchRaceType;